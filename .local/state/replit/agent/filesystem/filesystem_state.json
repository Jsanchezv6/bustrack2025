{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Bus Management System\n\n## Overview\n\nThis is a full-stack bus management system built with React, Express, and TypeScript. The application provides real-time location tracking for buses, schedule management, and driver assignments. It features separate dashboards for administrators and drivers, with WebSocket-based real-time communication for location updates. The system now includes persistent user sessions and integrated Google Maps for real-time location visualization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (July 2025)\n\n✓ **Campo \"Frecuencia\" Eliminado**: Removido campo innecesario de frecuencia del esquema de horarios y todos los componentes relacionados\n✓ **Panel \"Mi Turno Siguiente\" Corregido**: Solucionado problema crítico de zona horaria que causaba mal funcionamiento del panel\n✓ **Zona Horaria Guatemala**: Implementado uso correcto de zona horaria \"America/Guatemala\" para cálculos precisos de turnos\n✓ **Lógica de Turnos Depurada**: Corregido algoritmo que incorrectamente devolvía turnos pasados como \"próximos\"\n✓ **Cola de Turnos Corregida**: Backend ahora devuelve correctamente TODOS los turnos del chofer para mostrar cola completa\n✓ **Sistema de Múltiples Turnos**: Implementado sistema para asignar múltiples turnos por chofer con restablecimiento diario automático\n✓ **Panel Mejorado del Chofer**: Agregadas secciones \"Mi Turno Actual\" y \"Mi Turno Siguiente\" para mostrar información de turnos múltiples\n✓ **Endpoint de Turnos**: Creado `/api/assignments/driver/:driverId/shifts` para obtener turno actual y siguiente basado en la hora\n✓ **Lógica de Turnos Inteligente**: Sistema que determina automáticamente cuál es el turno actual y próximo según la hora del día\n✓ **Choferes Siempre Disponibles**: Eliminado filtro restrictivo para permitir asignar múltiples turnos al mismo chofer\n✓ **Botón \"Cola de Turnos\"**: Agregado botón en panel del chofer para mostrar todos los turnos programados del día con estados dinámicos\n✓ **Vista Cola Completa**: Interface completa mostrando turnos pendientes, en curso y completados con indicadores visuales\n✓ **Sistema de Gestión de Usuarios**: Implementado sistema completo para crear, editar y eliminar usuarios (administradores y choferes)\n✓ **Nueva Pestaña \"Usuarios\"**: Agregada pestaña en el panel administrativo con lista completa de usuarios y formularios de gestión\n✓ **Mejoras en Ubicaciones**: Corregidos problemas de transmisión de ubicaciones desde el panel de chofer\n✓ **Botón \"Localizar\"**: Implementado botón para centrar el mapa en ubicaciones específicas de choferes\n✓ **Sesiones Persistentes**: Implementado sistema de sesiones basado en localStorage para mantener login activo\n✓ **Integración Google Maps**: Agregado componente interactivo de Google Maps mostrando ubicaciones en tiempo real\n✓ **Actualizaciones en Tiempo Real**: Mejorado WebSocket con invalidación automática de cache para actualizaciones instantáneas\n✓ **Gestión de Sesiones**: Agregado endpoint de verificación de sesión y flujo de autenticación mejorado\n✓ **Mejoras de UI**: Agregados estados de carga y mejor manejo de errores en toda la aplicación\n✓ **Duplicados en Estado de Choferes Solucionado**: Cada chofer aparece una sola vez agrupando sus múltiples turnos\n✓ **Detener Transmisión Automática**: Sistema detiene transmisión cuando chofer cierra sesión o página\n✓ **Actualización Visual Automática**: Estado de transmisión se actualiza automáticamente sin recargar página via WebSocket\n✓ **Sincronización Estado Real**: Eliminada desconexión entre interfaz visual y estado real en base de datos\n✓ **WebSocket Mejorado**: Agregado manejo de mensaje `transmissionStopped` con invalidación automática de cache\n✓ **Botón Transmisión Unificado**: Consolidado en un solo botón \"Iniciar/Detener Transmisión\" que maneja toda la funcionalidad\n✓ **Eliminado Botón Duplicado**: Removido \"Obtener Ubicación Actual\" para evitar confusión y duplicidad de funciones\n✓ **Actualización Visual Corregida**: Solucionado problema de actualización visual del estado de choferes con invalidación agresiva de cache\n✓ **Estado Local Sincronizado**: Agregado limpieza automática de estado local cuando se detiene transmisión via WebSocket\n✓ **Logging Mejorado**: Implementado logging detallado para diagnóstico de problemas de sincronización visual\n✓ **Problema Turnos Panel Chofer Resuelto**: Sistema de turnos funcionando correctamente, necesitaba asignaciones para fecha actual\n✓ **Zona Horaria Guatemala Verificada**: Confirmado funcionamiento correcto de cálculos de turnos con \"America/Guatemala\"\n✓ **Turnos Perpetuos Implementados**: Cambiado filtro de fecha para mostrar TODOS los turnos activos sin restricción temporal\n✓ **Sistema de Turnos Mejorado**: Algoritmo optimizado para encontrar turno actual y siguiente de manera inteligente\n✓ **Hasheo Seguro de Contraseñas**: Implementado bcrypt para encriptar contraseñas con salt round 10\n✓ **Migración de Contraseñas**: Convertidas todas las contraseñas existentes de texto plano a hash bcrypt\n✓ **Autenticación Mejorada**: Sistema de login verificando contraseñas hasheadas de forma segura\n✓ **Nuevos Usuarios Protegidos**: Contraseñas de usuarios nuevos automáticamente hasheadas al crear/actualizar\n\n## System Architecture\n\nThe application follows a monorepo structure with clear separation between client and server code:\n\n- **Frontend**: React with TypeScript, using Vite as the build tool\n- **Backend**: Express.js with TypeScript, providing REST API endpoints\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Real-time Communication**: WebSockets for live location tracking\n- **Styling**: Tailwind CSS with shadcn/ui component library\n\n## Key Components\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety\n- **Vite** for fast development and building\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management and caching\n- **React Hook Form** with Zod validation for form handling\n- **shadcn/ui** components built on Radix UI primitives\n- **Tailwind CSS** for utility-first styling\n\n### Backend Architecture\n- **Express.js** server with TypeScript\n- **Drizzle ORM** with PostgreSQL dialect for database operations\n- **WebSocket Server** for real-time location broadcasting\n- **PostgreSQL database** with DatabaseStorage class for persistent data\n- **Session-based authentication** (simplified for demo purposes)\n\n### Database Schema\nThe system uses four main entities:\n- **Users**: Stores admin and driver accounts with roles\n- **Schedules**: Bus route schedules with timing and frequency information\n- **Assignments**: Links drivers to specific schedules for given dates\n- **Locations**: Real-time GPS coordinates from drivers\n\n### Authentication System\n- Simple username/password authentication\n- Role-based access control (admin/driver)\n- Client-side auth state management with AuthManager\n- Session persistence across page reloads\n\n## Data Flow\n\n1. **Authentication Flow**: Users log in through the login page, which sets the user context and redirects to role-appropriate dashboards\n2. **Admin Dashboard**: Administrators can create/manage schedules, assign drivers, and view real-time locations\n3. **Driver Dashboard**: Drivers can view their assignments and transmit location data\n4. **Real-time Updates**: Location data flows from driver devices through WebSocket connections to update admin dashboards instantly\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL serverless driver\n- **drizzle-orm**: Type-safe ORM with PostgreSQL support\n- **@tanstack/react-query**: Server state management\n- **wouter**: Lightweight React router\n- **ws**: WebSocket implementation for Node.js\n\n### UI and Styling\n- **@radix-ui/***: Accessible component primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Utility for creating component variants\n- **lucide-react**: Icon library\n\n### Form and Validation\n- **react-hook-form**: Performant form library\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: TypeScript-first schema validation\n- **drizzle-zod**: Zod schema generation from Drizzle schemas\n\n### Development Tools\n- **vite**: Fast build tool and dev server\n- **typescript**: Type safety and tooling\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast JavaScript bundler for production builds\n\n## Deployment Strategy\n\n### Development Environment\n- **Vite dev server** with HMR for frontend development\n- **tsx** for running TypeScript server files directly\n- **Drizzle Kit** for database schema management and migrations\n- **Replit integration** with custom Cartographer plugin and error overlay\n\n### Production Build Process\n1. Frontend assets built with Vite to `dist/public`\n2. Server code bundled with esbuild to `dist/index.js`\n3. Static file serving handled by Express in production\n4. Database migrations applied via `drizzle-kit push`\n\n### Environment Configuration\n- **DATABASE_URL**: PostgreSQL connection string (required)\n- **NODE_ENV**: Environment flag for development/production modes\n- **REPL_ID**: Replit-specific environment detection\n\n### Key Architectural Decisions\n\n**Database Choice**: PostgreSQL with Drizzle ORM was chosen for its type safety, migration system, and PostgreSQL-specific features like UUID generation.\n\n**State Management**: TanStack Query handles server state with caching and background updates, while React Context manages authentication state.\n\n**Real-time Communication**: WebSockets provide low-latency location updates essential for tracking moving vehicles.\n\n**Component Library**: shadcn/ui provides accessible, customizable components while maintaining design consistency.\n\n**Monorepo Structure**: Shared schema definitions between client and server ensure type consistency across the full stack.\n\n**Build Strategy**: Vite for frontend and esbuild for backend provide fast development cycles and optimized production builds.","size_bytes":10210},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configuración para WebSocket constructor en entorno Neon\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL debe estar configurada. ¿Olvidaste crear la base de datos?\",\n  );\n}\n\n// Pool de conexiones PostgreSQL\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\n// Instancia de Drizzle ORM con el esquema\nexport const db = drizzle({ client: pool, schema });","size_bytes":627},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\nimport { \n  loginSchema, \n  insertRouteSchema,\n  insertBusSchema,\n  insertAssignmentSchema,\n  insertLocationSchema,\n  insertUserSchema,\n  insertReportSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server for real-time location updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  // Store active WebSocket connections\n  const driverConnections = new Map<string, WebSocket>();\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Credenciales inválidas\" });\n      }\n\n      // Verificar contraseña hasheada con bcrypt\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      if (!isPasswordValid) {\n        return res.status(401).json({ message: \"Credenciales inválidas\" });\n      }\n\n      // Autenticación exitosa\n      res.json({\n        id: user.id,\n        username: user.username,\n        role: user.role,\n        fullName: user.fullName,\n        licenseNumber: user.licenseNumber,\n        driverStatus: user.driverStatus,\n      });\n    } catch (error) {\n      console.error('Error en login:', error);\n      res.status(400).json({ message: \"Datos de login inválidos\" });\n    }\n  });\n\n  // Verificar sesión\n  app.post(\"/api/auth/verify\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Sesión inválida\" });\n      }\n      \n      res.json({ valid: true });\n    } catch (error) {\n      res.status(401).json({ message: \"Sesión inválida\" });\n    }\n  });\n\n  // Schedule routes\n  app.get(\"/api/schedules\", async (req, res) => {\n    try {\n      const schedules = await storage.getAllSchedules();\n      res.json(schedules);\n    } catch (error) {\n      res.status(500).json({ message: \"Error al obtener rutas\" });\n    }\n  });\n\n  app.get(\"/api/schedules/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const schedule = await storage.getSchedule(id);\n      \n      if (!schedule) {\n        return res.status(404).json({ message: \"Ruta no encontrada\" });\n      }\n      \n      res.json(schedule);\n    } catch (error) {\n      console.error('Error getting schedule by ID:', error);\n      res.status(500).json({ message: \"Error al obtener ruta\" });\n    }\n  });\n\n  app.post(\"/api/schedules\", async (req, res) => {\n    try {\n      const scheduleData = insertRouteSchema.parse(req.body);\n      const schedule = await storage.createSchedule(scheduleData);\n      res.json(schedule);\n    } catch (error) {\n      res.status(400).json({ message: \"Datos de ruta inválidos\" });\n    }\n  });\n\n  app.put(\"/api/schedules/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const schedule = await storage.updateSchedule(id, updates);\n      \n      if (!schedule) {\n        return res.status(404).json({ message: \"Ruta no encontrada\" });\n      }\n      \n      res.json(schedule);\n    } catch (error) {\n      res.status(500).json({ message: \"Error al actualizar horario\" });\n    }\n  });\n\n  app.delete(\"/api/schedules/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteSchedule(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Ruta no encontrada\" });\n      }\n      \n      res.json({ message: \"Horario eliminado\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error al eliminar horario\" });\n    }\n  });\n\n  // Bus routes\n  app.get(\"/api/buses\", async (req, res) => {\n    try {\n      const buses = await storage.getAllBuses();\n      res.json(buses);\n    } catch (error) {\n      console.error('Error getting buses:', error);\n      res.status(500).json({ message: \"Error al obtener buses\" });\n    }\n  });\n\n  app.get(\"/api/buses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const bus = await storage.getBus(id);\n      \n      if (!bus) {\n        return res.status(404).json({ message: \"Bus no encontrado\" });\n      }\n      \n      res.json(bus);\n    } catch (error) {\n      console.error('Error getting bus by ID:', error);\n      res.status(500).json({ message: \"Error al obtener bus\" });\n    }\n  });\n\n  app.post(\"/api/buses\", async (req, res) => {\n    try {\n      const busData = insertBusSchema.parse(req.body);\n      const bus = await storage.createBus(busData);\n      res.json(bus);\n    } catch (error) {\n      console.error('Error creating bus:', error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Error interno del servidor\" });\n      }\n    }\n  });\n\n  app.put(\"/api/buses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const bus = await storage.updateBus(id, updates);\n      \n      if (!bus) {\n        return res.status(404).json({ message: \"Bus no encontrado\" });\n      }\n      \n      res.json(bus);\n    } catch (error) {\n      console.error('Error updating bus:', error);\n      res.status(500).json({ message: \"Error al actualizar bus\" });\n    }\n  });\n\n  app.delete(\"/api/buses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteBus(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Bus no encontrado\" });\n      }\n      \n      res.json({ message: \"Bus eliminado\" });\n    } catch (error) {\n      console.error('Error deleting bus:', error);\n      res.status(500).json({ message: \"Error al eliminar bus\" });\n    }\n  });\n\n  // Assignment routes\n  app.get(\"/api/assignments\", async (req, res) => {\n    try {\n      const assignments = await storage.getAllAssignments();\n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ message: \"Error al obtener asignaciones\" });\n    }\n  });\n\n  app.get(\"/api/assignments/driver/:driverId\", async (req, res) => {\n    try {\n      const { driverId } = req.params;\n      const assignments = await storage.getActiveAssignmentsByDriverId(driverId);\n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ message: \"Error al obtener asignaciones\" });\n    }\n  });\n\n  // Nuevo endpoint para obtener turnos actual y siguiente\n  app.get(\"/api/assignments/driver/:driverId/shifts\", async (req, res) => {\n    try {\n      const { driverId } = req.params;\n      const shifts = await storage.getCurrentAndNextShifts(driverId);\n      res.json(shifts);\n    } catch (error) {\n      console.error('Error getting driver shifts:', error);\n      res.status(500).json({ message: \"Error al obtener turnos del chofer\" });\n    }\n  });\n\n  app.post(\"/api/assignments\", async (req, res) => {\n    try {\n      const assignmentData = insertAssignmentSchema.parse(req.body);\n      const assignment = await storage.createAssignment(assignmentData);\n      res.json(assignment);\n    } catch (error) {\n      res.status(400).json({ message: \"Datos de asignación inválidos\" });\n    }\n  });\n\n  app.delete(\"/api/assignments/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteAssignment(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Asignación no encontrada\" });\n      }\n      \n      res.json({ message: \"Asignación eliminada\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error al eliminar asignación\" });\n    }\n  });\n\n  // Driver routes\n  app.get(\"/api/drivers\", async (req, res) => {\n    try {\n      const drivers = await storage.getAllDrivers();\n      res.json(drivers);\n    } catch (error) {\n      res.status(500).json({ message: \"Error al obtener choferes\" });\n    }\n  });\n\n  // Users management endpoints\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Error getting users:', error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      console.error('Error creating user:', error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Error interno del servidor\" });\n      }\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const userData = req.body;\n      const updatedUser = await storage.updateUser(userId, userData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"Usuario no encontrado\" });\n      }\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const deleted = await storage.deleteUser(userId);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Usuario no encontrado\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Update driver status\n  app.put(\"/api/users/:id/status\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const statusSchema = z.object({\n        driverStatus: z.enum([\"disponible\", \"en_ruta_cargar\", \"en_ruta_descargar\", \"cargando\", \"descargando\", \"no_disponible\"])\n      });\n      \n      const { driverStatus } = statusSchema.parse(req.body);\n      const updatedUser = await storage.updateUser(userId, { driverStatus });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"Usuario no encontrado\" });\n      }\n      \n      res.json({\n        success: true,\n        user: {\n          id: updatedUser.id,\n          driverStatus: updatedUser.driverStatus\n        }\n      });\n    } catch (error) {\n      console.error('Error updating driver status:', error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Estado inválido\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Error interno del servidor\" });\n      }\n    }\n  });\n\n\n\n  // Location routes\n  app.get(\"/api/locations\", async (req, res) => {\n    try {\n      const locations = await storage.getAllActiveLocations();\n      res.json(locations);\n    } catch (error) {\n      res.status(500).json({ message: \"Error al obtener ubicaciones\" });\n    }\n  });\n\n  app.post(\"/api/locations\", async (req, res) => {\n    try {\n      console.log('POST /api/locations - Datos recibidos:', req.body);\n      const locationData = insertLocationSchema.parse(req.body);\n      console.log('POST /api/locations - Datos validados:', locationData);\n      const location = await storage.updateDriverLocation(locationData);\n      console.log('POST /api/locations - Ubicación guardada:', location);\n      \n      // Broadcast location update to all admin connections\n      const locationUpdate = {\n        type: 'locationUpdate',\n        data: location\n      };\n      \n      driverConnections.forEach((ws, connectionId) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify(locationUpdate));\n        }\n      });\n      \n      res.json(location);\n    } catch (error) {\n      console.error('Error POST /api/locations:', error);\n      res.status(400).json({ message: \"Datos de ubicación inválidos\", error: error instanceof Error ? error.message : 'Error desconocido' });\n    }\n  });\n\n  // Endpoint para detener transmisión\n  app.post(\"/api/locations/stop-transmission\", async (req, res) => {\n    try {\n      const { driverId } = req.body;\n      if (!driverId) {\n        return res.status(400).json({ message: \"Driver ID requerido\" });\n      }\n\n      console.log(`Deteniendo transmisión para chofer: ${driverId}`);\n      \n      // Actualizar el estado de transmisión a false en la base de datos\n      await storage.stopDriverTransmission(driverId);\n      \n      // Broadcast stop transmission update to all admin connections\n      const stopTransmissionUpdate = {\n        type: 'transmissionStopped',\n        data: { driverId, isTransmitting: false }\n      };\n      \n      console.log(`Enviando WebSocket a ${driverConnections.size} conexiones:`, stopTransmissionUpdate);\n      \n      let sentCount = 0;\n      driverConnections.forEach((ws, connectionId) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify(stopTransmissionUpdate));\n          sentCount++;\n        } else {\n          console.log(`Conexión ${connectionId} cerrada, removiendo...`);\n          driverConnections.delete(connectionId);\n        }\n      });\n      \n      console.log(`Mensaje WebSocket enviado a ${sentCount} conexiones activas`);\n\n      res.json({ success: true, message: \"Transmisión detenida\" });\n    } catch (error) {\n      console.error('Error deteniendo transmisión:', error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Report routes\n  app.get(\"/api/reports\", async (req, res) => {\n    try {\n      const reports = await storage.getAllReports();\n      res.json(reports);\n    } catch (error) {\n      console.error('Error obteniendo reportes:', error);\n      res.status(500).json({ message: \"Error al obtener reportes\" });\n    }\n  });\n\n  app.post(\"/api/reports\", async (req, res) => {\n    try {\n      const reportData = insertReportSchema.parse(req.body);\n      const report = await storage.createReport(reportData);\n      res.json(report);\n    } catch (error) {\n      console.error('Error creando reporte:', error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Error interno del servidor\" });\n      }\n    }\n  });\n\n  app.get(\"/api/reports/driver/:driverId\", async (req, res) => {\n    try {\n      const driverId = req.params.driverId;\n      const reports = await storage.getReportsByDriverId(driverId);\n      res.json(reports);\n    } catch (error) {\n      console.error('Error obteniendo reportes del chofer:', error);\n      res.status(500).json({ message: \"Error al obtener reportes del chofer\" });\n    }\n  });\n\n  // WebSocket handling\n  wss.on('connection', (ws, req) => {\n    const connectionId = Math.random().toString(36).substring(7);\n    driverConnections.set(connectionId, ws);\n\n    ws.on('message', async (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === 'locationUpdate') {\n          // Update location in storage\n          await storage.updateDriverLocation(data.location);\n          \n          // Broadcast to all other connections\n          const locationUpdate = {\n            type: 'locationUpdate',\n            data: data.location\n          };\n          \n          driverConnections.forEach((connection, id) => {\n            if (id !== connectionId && connection.readyState === WebSocket.OPEN) {\n              connection.send(JSON.stringify(locationUpdate));\n            }\n          });\n        }\n\n        if (data.type === 'transmissionStatus') {\n          await storage.setDriverTransmissionStatus(data.driverId, data.isTransmitting);\n          \n          // Broadcast status change\n          const statusUpdate = {\n            type: 'transmissionStatusUpdate',\n            data: {\n              driverId: data.driverId,\n              isTransmitting: data.isTransmitting\n            }\n          };\n          \n          driverConnections.forEach((connection, id) => {\n            if (connection.readyState === WebSocket.OPEN) {\n              connection.send(JSON.stringify(statusUpdate));\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error processing WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      driverConnections.delete(connectionId);\n    });\n\n    // Send initial data\n    ws.send(JSON.stringify({\n      type: 'connected',\n      connectionId\n    }));\n  });\n\n  return httpServer;\n}\n","size_bytes":17009},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Route, \n  type InsertRoute,\n  type Bus,\n  type InsertBus,\n  type Assignment,\n  type InsertAssignment,\n  type Location,\n  type InsertLocation,\n  type Report,\n  type InsertReport,\n  users,\n  routes,\n  buses,\n  assignments,\n  locations,\n  reports\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllDrivers(): Promise<User[]>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, user: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n\n  // Routes\n  getAllSchedules(): Promise<Route[]>;\n  getSchedule(id: string): Promise<Route | undefined>;\n  createSchedule(schedule: InsertRoute): Promise<Route>;\n  updateSchedule(id: string, schedule: Partial<Route>): Promise<Route | undefined>;\n  deleteSchedule(id: string): Promise<boolean>;\n\n  // Buses\n  getAllBuses(): Promise<Bus[]>;\n  getBus(id: string): Promise<Bus | undefined>;\n  createBus(bus: InsertBus): Promise<Bus>;\n  updateBus(id: string, bus: Partial<Bus>): Promise<Bus | undefined>;\n  deleteBus(id: string): Promise<boolean>;\n\n  // Assignments\n  getAllAssignments(): Promise<Assignment[]>;\n  getAssignmentsByDriverId(driverId: string): Promise<Assignment[]>;\n  getActiveAssignmentByDriverId(driverId: string): Promise<Assignment | undefined>;\n  createAssignment(assignment: InsertAssignment): Promise<Assignment>;\n  deleteAssignment(id: string): Promise<boolean>;\n\n  // Locations\n  updateDriverLocation(location: InsertLocation): Promise<Location>;\n  getDriverLocation(driverId: string): Promise<Location | undefined>;\n  getAllActiveLocations(): Promise<Location[]>;\n  setDriverTransmissionStatus(driverId: string, isTransmitting: boolean): Promise<void>;\n  stopDriverTransmission(driverId: string): Promise<void>;\n\n  // Reports\n  createReport(report: InsertReport): Promise<Report>;\n  getAllReports(): Promise<Report[]>;\n  getReportsByDriverId(driverId: string): Promise<Report[]>;\n}\n\n// Implementación de almacenamiento con base de datos PostgreSQL\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Inicializar datos por defecto al crear la instancia\n    this.initializeDefaultData();\n  }\n\n  private async initializeDefaultData() {\n    try {\n      // Verificar si ya existen usuarios\n      const existingUsers = await db.select().from(users).limit(1);\n      if (existingUsers.length > 0) {\n        return; // Ya hay datos inicializados\n      }\n\n      // Crear usuario administrador por defecto con contraseña hasheada\n      const hashedAdminPassword = await bcrypt.hash(\"admin123\", 10);\n      const [admin] = await db.insert(users).values({\n        username: \"admin\",\n        password: hashedAdminPassword,\n        role: \"admin\",\n        fullName: \"Administrador Sistema\",\n        licenseNumber: null,\n      }).returning();\n\n      // Crear chofer por defecto con contraseña hasheada\n      const hashedDriverPassword = await bcrypt.hash(\"chofer123\", 10);\n      const [driver] = await db.insert(users).values({\n        username: \"chofer1\",\n        password: hashedDriverPassword,\n        role: \"driver\",\n        fullName: \"Juan Pérez\",\n        licenseNumber: \"A1234567\",\n      }).returning();\n\n      // Crear horario de muestra\n      const [schedule] = await db.insert(routes).values({\n        routeName: \"Centro - Universidad\",\n        routeNumber: 1,\n        startTime: \"06:00\",\n        endTime: \"22:00\",\n        isActive: true,\n      }).returning();\n\n      // Crear bus de muestra\n      const [bus] = await db.insert(buses).values({\n        plateNumber: \"P-001AAA\",\n        busNumber: \"001\",\n        model: \"Mercedes Benz LO 915\",\n        year: 2020,\n        capacity: 45,\n        status: \"disponible\",\n        isActive: true,\n      }).returning();\n\n      // Crear asignación de muestra\n      await db.insert(assignments).values({\n        driverId: driver.id,\n        scheduleId: schedule.id,\n        busId: bus.id,\n        assignedDate: new Date().toISOString().split('T')[0],\n        shiftStart: \"06:00\",\n        shiftEnd: \"14:00\",\n        isActive: true,\n      });\n\n      console.log(\"Datos iniciales creados en la base de datos\");\n    } catch (error) {\n      console.error(\"Error al inicializar datos por defecto:\", error);\n    }\n  }\n\n  // Métodos para Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hashear la contraseña antes de guardar\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const userWithHashedPassword = {\n      ...insertUser,\n      password: hashedPassword\n    };\n    \n    const [user] = await db\n      .insert(users)\n      .values(userWithHashedPassword)\n      .returning();\n    return user;\n  }\n\n  async getAllDrivers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, 'driver'));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUser(id: string, userData: Partial<User>): Promise<User | undefined> {\n    // Si se está actualizando la contraseña, hashearla\n    if (userData.password) {\n      userData.password = await bcrypt.hash(userData.password, 10);\n    }\n    \n    const [updatedUser] = await db\n      .update(users)\n      .set(userData)\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Métodos para Buses\n  async getAllBuses(): Promise<Bus[]> {\n    return await db.select().from(buses);\n  }\n\n  async getBus(id: string): Promise<Bus | undefined> {\n    const [bus] = await db.select().from(buses).where(eq(buses.id, id));\n    return bus || undefined;\n  }\n\n  async createBus(insertBus: InsertBus): Promise<Bus> {\n    const [bus] = await db\n      .insert(buses)\n      .values(insertBus)\n      .returning();\n    return bus;\n  }\n\n  async updateBus(id: string, busData: Partial<Bus>): Promise<Bus | undefined> {\n    const [updatedBus] = await db\n      .update(buses)\n      .set(busData)\n      .where(eq(buses.id, id))\n      .returning();\n    return updatedBus || undefined;\n  }\n\n  async deleteBus(id: string): Promise<boolean> {\n    const result = await db.delete(buses).where(eq(buses.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Métodos para Schedules\n  async getAllSchedules(): Promise<Route[]> {\n    return await db.select().from(routes);\n  }\n\n  async getSchedule(id: string): Promise<Route | undefined> {\n    const [schedule] = await db.select().from(routes).where(eq(routes.id, id));\n    return schedule || undefined;\n  }\n\n  async createSchedule(insertSchedule: InsertRoute): Promise<Route> {\n    const [schedule] = await db\n      .insert(routes)\n      .values(insertSchedule)\n      .returning();\n    return schedule;\n  }\n\n  async updateSchedule(id: string, updates: Partial<Route>): Promise<Route | undefined> {\n    const [updated] = await db\n      .update(routes)\n      .set(updates)\n      .where(eq(routes.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteSchedule(id: string): Promise<boolean> {\n    const result = await db.delete(routes).where(eq(routes.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Métodos para Assignments\n  async getAllAssignments(): Promise<Assignment[]> {\n    return await db.select().from(assignments);\n  }\n\n  async getAssignmentsByDriverId(driverId: string): Promise<Assignment[]> {\n    return await db.select().from(assignments).where(eq(assignments.driverId, driverId));\n  }\n\n  async getActiveAssignmentByDriverId(driverId: string): Promise<Assignment | undefined> {\n    const today = new Date().toISOString().split('T')[0];\n    const [assignment] = await db\n      .select()\n      .from(assignments)\n      .where(\n        and(\n          eq(assignments.driverId, driverId),\n          eq(assignments.isActive, true),\n          eq(assignments.assignedDate, today)\n        )\n      );\n    return assignment || undefined;\n  }\n\n  // Método para obtener todos los turnos activos de un chofer (perpetuos)\n  async getActiveAssignmentsByDriverId(driverId: string): Promise<Assignment[]> {\n    return await db\n      .select()\n      .from(assignments)\n      .where(\n        and(\n          eq(assignments.driverId, driverId),\n          eq(assignments.isActive, true)\n        )\n      )\n      .orderBy(assignments.shiftStart);\n  }\n\n  // Método para obtener turno actual y siguiente\n  async getCurrentAndNextShifts(driverId: string): Promise<{ current: Assignment | null, next: Assignment | null }> {\n    const activeAssignments = await this.getActiveAssignmentsByDriverId(driverId);\n    \n    if (activeAssignments.length === 0) {\n      return { current: null, next: null };\n    }\n\n    // Usar zona horaria de Guatemala (GMT-6)\n    const now = new Date();\n    const guatemalaTime = new Date(now.toLocaleString(\"en-US\", {timeZone: \"America/Guatemala\"}));\n    const currentTime = `${String(guatemalaTime.getHours()).padStart(2, '0')}:${String(guatemalaTime.getMinutes()).padStart(2, '0')}`;\n    \n    let current: Assignment | null = null;\n    let next: Assignment | null = null;\n\n    // Buscar turno actual (donde la hora actual está entre shiftStart y shiftEnd)\n    for (const assignment of activeAssignments) {\n      if (currentTime >= assignment.shiftStart && currentTime <= assignment.shiftEnd) {\n        current = assignment;\n        break;\n      }\n    }\n\n    // Buscar siguiente turno - algoritmo mejorado\n    // 1. Buscar turnos que inician después de la hora actual\n    let futureShifts = activeAssignments.filter(a => a.shiftStart > currentTime);\n    \n    if (futureShifts.length > 0) {\n      // Hay turnos después de la hora actual\n      next = futureShifts[0]; // El primero en orden alfabético será el más temprano\n    } else {\n      // No hay más turnos después de la hora actual, tomar el primer turno del día (ciclo)\n      next = activeAssignments[0]; // El primero por orden de shiftStart\n    }\n\n    return { current, next };\n  }\n\n  async createAssignment(insertAssignment: InsertAssignment): Promise<Assignment> {\n    const [assignment] = await db\n      .insert(assignments)\n      .values(insertAssignment)\n      .returning();\n    return assignment;\n  }\n\n  async deleteAssignment(id: string): Promise<boolean> {\n    const result = await db.delete(assignments).where(eq(assignments.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Métodos para Locations\n  async updateDriverLocation(insertLocation: InsertLocation): Promise<Location> {\n    // Buscar ubicación existente para el chofer\n    const [existingLocation] = await db\n      .select()\n      .from(locations)\n      .where(eq(locations.driverId, insertLocation.driverId));\n\n    if (existingLocation) {\n      // Actualizar ubicación existente\n      const [updated] = await db\n        .update(locations)\n        .set({\n          latitude: insertLocation.latitude,\n          longitude: insertLocation.longitude,\n          isTransmitting: insertLocation.isTransmitting,\n          timestamp: new Date(),\n        })\n        .where(eq(locations.id, existingLocation.id))\n        .returning();\n      return updated;\n    } else {\n      // Crear nueva ubicación\n      const [location] = await db\n        .insert(locations)\n        .values(insertLocation)\n        .returning();\n      return location;\n    }\n  }\n\n  async getDriverLocation(driverId: string): Promise<Location | undefined> {\n    const [location] = await db\n      .select()\n      .from(locations)\n      .where(eq(locations.driverId, driverId));\n    return location || undefined;\n  }\n\n  async getAllActiveLocations(): Promise<Location[]> {\n    return await db\n      .select()\n      .from(locations)\n      .where(eq(locations.isTransmitting, true));\n  }\n\n  async setDriverTransmissionStatus(driverId: string, isTransmitting: boolean): Promise<void> {\n    await db\n      .update(locations)\n      .set({ \n        isTransmitting,\n        timestamp: new Date()\n      })\n      .where(eq(locations.driverId, driverId));\n  }\n\n  async stopDriverTransmission(driverId: string): Promise<void> {\n    await db\n      .update(locations)\n      .set({ \n        isTransmitting: false,\n        timestamp: new Date()\n      })\n      .where(eq(locations.driverId, driverId));\n  }\n\n  // Métodos para Reports\n  async createReport(insertReport: InsertReport): Promise<Report> {\n    const [report] = await db\n      .insert(reports)\n      .values(insertReport)\n      .returning();\n    return report;\n  }\n\n  async getAllReports(): Promise<Report[]> {\n    return await db.select().from(reports);\n  }\n\n  async getReportsByDriverId(driverId: string): Promise<Report[]> {\n    return await db.select().from(reports).where(eq(reports.driverId, driverId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13434},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'admin' | 'driver'\n  fullName: text(\"full_name\").notNull(),\n  licenseNumber: text(\"license_number\"),\n  driverStatus: text(\"driver_status\").default(\"disponible\"), // Estado del chofer: 'disponible', 'en_ruta_cargar', 'en_ruta_descargar', 'cargando', 'descargando', 'no_disponible'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const routes = pgTable(\"routes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  routeName: text(\"route_name\").notNull(),\n  routeNumber: integer(\"route_number\").notNull(),\n  startTime: text(\"start_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(), // HH:MM format\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tabla de buses\nexport const buses = pgTable(\"buses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  plateNumber: text(\"plate_number\").notNull().unique(), // Placa del bus\n  busNumber: text(\"bus_number\").notNull(), // Número de unidad\n  model: text(\"model\").notNull(), // Modelo del bus\n  year: integer(\"year\").notNull(), // Año de fabricación\n  capacity: integer(\"capacity\").notNull(), // Capacidad de pasajeros\n  status: text(\"status\").notNull().default(\"disponible\"), // 'disponible', 'en_servicio', 'mantenimiento', 'fuera_de_servicio'\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const assignments = pgTable(\"assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").references(() => users.id).notNull(),\n  scheduleId: varchar(\"schedule_id\").references(() => routes.id).notNull(),\n  busId: varchar(\"bus_id\").references(() => buses.id).notNull(), // Referencia al bus asignado\n  assignedDate: text(\"assigned_date\").notNull(), // YYYY-MM-DD format\n  shiftStart: text(\"shift_start\").notNull(), // HH:MM format\n  shiftEnd: text(\"shift_end\").notNull(), // HH:MM format\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const locations = pgTable(\"locations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").references(() => users.id).notNull(),\n  latitude: text(\"latitude\").notNull(),\n  longitude: text(\"longitude\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  isTransmitting: boolean(\"is_transmitting\").default(false),\n});\n\nexport const reports = pgTable(\"reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").references(() => users.id).notNull(),\n  type: text(\"type\").notNull(), // 'atraso', 'incidente', 'otro'\n  description: text(\"description\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRouteSchema = createInsertSchema(routes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBusSchema = createInsertSchema(buses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLocationSchema = createInsertSchema(locations).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  timestamp: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Route = typeof routes.$inferSelect;\nexport type InsertRoute = z.infer<typeof insertRouteSchema>;\n\nexport type Bus = typeof buses.$inferSelect;\nexport type InsertBus = z.infer<typeof insertBusSchema>;\n\nexport type Assignment = typeof assignments.$inferSelect;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\n\nexport type Location = typeof locations.$inferSelect;\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\n\nexport type Report = typeof reports.$inferSelect;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\n\n// Login schema\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Usuario es requerido\"),\n  password: z.string().min(1, \"Contraseña es requerida\"),\n});\n\nexport type LoginRequest = z.infer<typeof loginSchema>;\n","size_bytes":4883},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Login from \"@/pages/login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport DriverDashboard from \"@/pages/driver-dashboard\";\nimport PassengerView from \"@/pages/passenger-view\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/passenger\">\n        <PassengerView onBackToLogin={() => window.location.href = '/'} />\n      </Route>\n      <Route path=\"/login\">\n        <Login />\n      </Route>\n      <Route path=\"/\">\n        {!user ? <Login /> : user.role === 'admin' ? <AdminDashboard /> : <DriverDashboard />}\n      </Route>\n      <Route path=\"/admin\">\n        {user?.role === 'admin' ? <AdminDashboard /> : <Login />}\n      </Route>\n      <Route path=\"/driver\">\n        {user?.role === 'driver' ? <DriverDashboard /> : <Login />}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1662},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(123, 38%, 57%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(36, 100%, 56%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --neutral: hsl(0, 0%, 96.1%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(123, 38%, 57%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(36, 100%, 56%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  --neutral: hsl(240, 3.7%, 15.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-neutral text-foreground;\n    font-family: 'Roboto', sans-serif;\n  }\n}\n\n@layer utilities {\n  .bg-neutral {\n    background-color: var(--neutral);\n  }\n  \n  .text-primary {\n    color: var(--primary);\n  }\n  \n  .bg-primary {\n    background-color: var(--primary);\n  }\n  \n  .hover\\:bg-primary-dark:hover {\n    background-color: hsl(207, 90%, 45%);\n  }\n  \n  .text-secondary {\n    color: var(--secondary);\n  }\n  \n  .bg-secondary {\n    background-color: var(--secondary);\n  }\n  \n  .hover\\:bg-secondary-dark:hover {\n    background-color: hsl(123, 38%, 47%);\n  }\n  \n  .text-accent {\n    color: var(--accent);\n  }\n  \n  .bg-accent {\n    background-color: var(--accent);\n  }\n  \n  .hover\\:bg-accent-dark:hover {\n    background-color: hsl(36, 100%, 46%);\n  }\n}\n","size_bytes":2447},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/assignment-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { InsertAssignment, insertAssignmentSchema, User, Schedule, Bus } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { X } from \"lucide-react\";\n\ninterface AssignmentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  drivers: User[];\n  schedules: Schedule[];\n  buses: Bus[];\n}\n\nexport function AssignmentModal({ isOpen, onClose, drivers, schedules, buses }: AssignmentModalProps) {\n  const { toast } = useToast();\n\n  const form = useForm<InsertAssignment>({\n    resolver: zodResolver(insertAssignmentSchema),\n    defaultValues: {\n      driverId: \"\",\n      scheduleId: \"\",\n      busId: \"\",\n      assignedDate: new Date().toISOString().split('T')[0],\n      shiftStart: \"06:00\",\n      shiftEnd: \"14:00\",\n      isActive: true,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertAssignment) => apiRequest(\"POST\", \"/api/assignments\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/drivers'] });\n      toast({ \n        title: \"Asignación creada exitosamente\",\n        description: \"El chofer ha sido asignado al turno.\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error al crear asignación\",\n        description: error.message || \"No se pudo crear la asignación\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertAssignment) => {\n    createMutation.mutate(data);\n  };\n\n  const selectedSchedule = schedules.find(s => s.id === form.watch(\"scheduleId\"));\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\">\n        <DialogHeader>\n          <div className=\"flex justify-between items-center\">\n            <DialogTitle className=\"text-2xl font-semibold text-gray-800\">\n              Nueva Asignación\n            </DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"driverId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Chofer</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger disabled={createMutation.isPending}>\n                        <SelectValue placeholder=\"Seleccione un chofer\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {drivers.map((driver) => (\n                        <SelectItem key={driver.id} value={driver.id}>\n                          {driver.fullName} - {driver.licenseNumber}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"scheduleId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Ruta</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger disabled={createMutation.isPending}>\n                        <SelectValue placeholder=\"Seleccione una ruta\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {schedules.filter(s => s.isActive).map((schedule) => (\n                        <SelectItem key={schedule.id} value={schedule.id}>\n                          Ruta {schedule.routeNumber} - {schedule.routeName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"busId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Bus</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger disabled={createMutation.isPending}>\n                        <SelectValue placeholder=\"Seleccione un bus\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {buses.filter(b => b.isActive && b.status === 'disponible').map((bus) => (\n                        <SelectItem key={bus.id} value={bus.id}>\n                          {bus.plateNumber} - Unidad #{bus.busNumber} ({bus.model})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"assignedDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Fecha de Asignación</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field}\n                      disabled={createMutation.isPending}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"shiftStart\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Inicio del Turno</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        disabled={createMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"shiftEnd\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fin del Turno</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        disabled={createMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {selectedSchedule && (\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-gray-800 mb-2\">Información de la Ruta</h4>\n                <div className=\"text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Horario de operación:</span>\n                    <span className=\"ml-2 font-medium\">\n                      {selectedSchedule.startTime} - {selectedSchedule.endTime}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex space-x-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                disabled={createMutation.isPending}\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1 bg-primary hover:bg-primary-dark\"\n                disabled={createMutation.isPending || drivers.length === 0 || schedules.length === 0}\n              >\n                {createMutation.isPending ? \"Creando...\" : \"Crear Asignación\"}\n              </Button>\n            </div>\n\n            {(drivers.length === 0 || schedules.length === 0) && (\n              <p className=\"text-sm text-red-500 text-center\">\n                {drivers.length === 0 && \"No hay choferes disponibles. \"}\n                {schedules.length === 0 && \"No hay rutas activas disponibles.\"}\n              </p>\n            )}\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9392},"client/src/components/bus-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertBusSchema, type InsertBus, type Bus } from \"@shared/schema\";\n\ntype BusFormData = InsertBus;\n\ninterface BusModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  bus?: Bus | null;\n}\n\nexport function BusModal({ isOpen, onClose, bus }: BusModalProps) {\n  const { toast } = useToast();\n  const isEditing = !!bus;\n\n  const form = useForm<BusFormData>({\n    resolver: zodResolver(insertBusSchema),\n    defaultValues: {\n      plateNumber: bus?.plateNumber || \"\",\n      busNumber: bus?.busNumber || \"\",\n      model: bus?.model || \"\",\n      year: bus?.year || new Date().getFullYear(),\n      capacity: bus?.capacity || 45,\n      status: bus?.status || \"disponible\",\n      isActive: bus?.isActive ?? true,\n    },\n  });\n\n  const createBusMutation = useMutation({\n    mutationFn: (busData: BusFormData) => \n      apiRequest(\"POST\", \"/api/buses\", busData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/buses'] });\n      toast({\n        title: \"Bus creado\",\n        description: \"El bus ha sido creado exitosamente\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"No se pudo crear el bus\",\n      });\n    },\n  });\n\n  const updateBusMutation = useMutation({\n    mutationFn: (busData: Partial<Bus>) => \n      apiRequest(\"PUT\", `/api/buses/${bus?.id}`, busData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/buses'] });\n      toast({\n        title: \"Bus actualizado\",\n        description: \"El bus ha sido actualizado exitosamente\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"No se pudo actualizar el bus\",\n      });\n    },\n  });\n\n  const onSubmit = (data: BusFormData) => {\n    if (isEditing) {\n      updateBusMutation.mutate(data);\n    } else {\n      createBusMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    onClose();\n    form.reset();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Editar Bus\" : \"Crear Nuevo Bus\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"plateNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Placa</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"P-001AAA\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"busNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Número de Unidad</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"001\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"model\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Modelo</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Mercedes Benz LO 915\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"year\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Año</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1990\" \n                        max={new Date().getFullYear() + 1} \n                        {...field}\n                        onChange={e => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"capacity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Capacidad (pasajeros)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\" \n                        max=\"100\" \n                        {...field}\n                        onChange={e => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Estado</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Seleccionar estado\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"disponible\">Disponible</SelectItem>\n                        <SelectItem value=\"en_servicio\">En Servicio</SelectItem>\n                        <SelectItem value=\"mantenimiento\">Mantenimiento</SelectItem>\n                        <SelectItem value=\"fuera_de_servicio\">Fuera de Servicio</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createBusMutation.isPending || updateBusMutation.isPending}\n                data-testid={isEditing ? \"button-update-bus\" : \"button-create-bus\"}\n              >\n                {(createBusMutation.isPending || updateBusMutation.isPending) ? \"Guardando...\" : (isEditing ? \"Actualizar\" : \"Crear\")}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7918},"client/src/components/google-map.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { Location } from '@shared/schema';\n\n// Definición de tipos básicos para Google Maps\ninterface GoogleMapsApi {\n  maps: {\n    Map: any;\n    Marker: any;\n    InfoWindow: any;\n    LatLngBounds: any;\n    Size: any;\n    Point: any;\n  };\n}\n\ndeclare const google: GoogleMapsApi;\n\ninterface GoogleMapProps {\n  locations: Location[];\n  center?: { lat: number; lng: number };\n  zoom?: number;\n  className?: string;\n}\n\n// Clave de API de Google Maps - debe configurarse en variables de entorno\nconst GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY || '';\n\nexport function GoogleMap({ locations, center, zoom = 13, className = \"w-full h-96\" }: GoogleMapProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState<any>(null);\n  const [markers, setMarkers] = useState<any[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Cargar Google Maps API\n  useEffect(() => {\n    if (!GOOGLE_MAPS_API_KEY) {\n      setError('Clave de API de Google Maps no configurada');\n      return;\n    }\n\n    const loader = new Loader({\n      apiKey: GOOGLE_MAPS_API_KEY,\n      version: 'weekly',\n      libraries: ['places']\n    });\n\n    loader.load().then(() => {\n      setIsLoaded(true);\n    }).catch((err) => {\n      console.error('Error cargando Google Maps:', err);\n      setError('Error al cargar Google Maps');\n    });\n  }, []);\n\n  // Inicializar mapa\n  useEffect(() => {\n    if (!isLoaded || !mapRef.current || map) return;\n\n    const defaultCenter = center || { lat: -12.0464, lng: -77.0428 }; // Lima, Perú por defecto\n\n    const newMap = new (google as any).maps.Map(mapRef.current, {\n      center: defaultCenter,\n      zoom: zoom,\n      styles: [\n        {\n          featureType: 'transit',\n          elementType: 'geometry',\n          stylers: [{ color: '#2f3948' }]\n        },\n        {\n          featureType: 'transit.station',\n          elementType: 'labels.text.fill',\n          stylers: [{ color: '#d59563' }]\n        }\n      ]\n    });\n\n    setMap(newMap);\n  }, [isLoaded, center, zoom, map]);\n\n  // Actualizar marcadores cuando cambien las ubicaciones\n  useEffect(() => {\n    if (!map || !locations) return;\n\n    // Limpiar marcadores existentes\n    markers.forEach(marker => marker.setMap(null));\n\n    // Crear nuevos marcadores\n    const newMarkers = locations\n      .filter(location => location.isTransmitting && location.latitude && location.longitude)\n      .map(location => {\n        const position = {\n          lat: parseFloat(location.latitude),\n          lng: parseFloat(location.longitude)\n        };\n\n        const marker = new (google as any).maps.Marker({\n          position,\n          map,\n          title: `Chofer ID: ${location.driverId}`,\n          icon: {\n            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n              <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"16\" cy=\"16\" r=\"12\" fill=\"#22c55e\" stroke=\"#ffffff\" stroke-width=\"2\"/>\n                <path d=\"M10 16l4 4 8-8\" stroke=\"#ffffff\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              </svg>\n            `),\n            scaledSize: new (google as any).maps.Size(32, 32),\n            anchor: new (google as any).maps.Point(16, 16)\n          }\n        });\n\n        // Ventana de información\n        const infoWindow = new (google as any).maps.InfoWindow({\n          content: `\n            <div class=\"p-3 min-w-48\">\n              <h3 class=\"font-semibold text-sm mb-2 text-green-700\">🚌 Chofer en Servicio</h3>\n              <div class=\"space-y-1 text-xs text-gray-600\">\n                <p><strong>ID:</strong> ${location.driverId}</p>\n                <p><strong>Estado:</strong> <span class=\"text-green-600\">Transmitiendo</span></p>\n                <p><strong>Coordenadas:</strong><br>\n                   Lat: ${parseFloat(location.latitude).toFixed(6)}<br>\n                   Lng: ${parseFloat(location.longitude).toFixed(6)}\n                </p>\n                <p><strong>Actualizado:</strong><br>\n                   ${new Date(location.timestamp || '').toLocaleString()}\n                </p>\n              </div>\n            </div>\n          `\n        });\n\n        marker.addListener('click', () => {\n          infoWindow.open(map, marker);\n        });\n\n        return marker;\n      });\n\n    setMarkers(newMarkers);\n\n    // Ajustar vista para mostrar todos los marcadores\n    if (newMarkers.length > 0) {\n      const bounds = new (google as any).maps.LatLngBounds();\n      newMarkers.forEach((marker: any) => {\n        const position = marker.getPosition();\n        if (position) bounds.extend(position);\n      });\n      map.fitBounds(bounds);\n    }\n  }, [map, locations]);\n\n  if (error) {\n    return (\n      <div className={`${className} bg-gray-100 flex items-center justify-center`}>\n        <div className=\"text-center p-4\">\n          <p className=\"text-red-600 font-medium\">Error con Google Maps</p>\n          <p className=\"text-sm text-gray-600 mt-1\">{error}</p>\n          <p className=\"text-xs text-gray-500 mt-2\">\n            Configure VITE_GOOGLE_MAPS_API_KEY en las variables de entorno\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <div className={`${className} bg-gray-100 flex items-center justify-center`}>\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-sm text-gray-600 mt-2\">Cargando mapa...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <div ref={mapRef} className={className} />;\n}","size_bytes":5806},"client/src/components/report-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertReportSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AlertTriangle } from \"lucide-react\";\n\n// Esquema extendido para el formulario con validaciones localizadas\nconst reportFormSchema = insertReportSchema.extend({\n  type: z.enum([\"atraso\", \"incidente\", \"otro\"], {\n    errorMap: () => ({ message: \"Debe seleccionar un tipo de reporte\" }),\n  }),\n  description: z\n    .string()\n    .min(10, \"La descripción debe tener al menos 10 caracteres\")\n    .max(500, \"La descripción no puede exceder 500 caracteres\"),\n});\n\ntype ReportFormData = z.infer<typeof reportFormSchema>;\n\ninterface ReportModalProps {\n  driverId: string;\n}\n\nexport function ReportModal({ driverId }: ReportModalProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ReportFormData>({\n    resolver: zodResolver(reportFormSchema),\n    defaultValues: {\n      driverId,\n      type: undefined,\n      description: \"\",\n    },\n  });\n\n  const createReportMutation = useMutation({\n    mutationFn: (data: ReportFormData) =>\n      apiRequest('POST', '/api/reports', data),\n    onSuccess: () => {\n      toast({\n        title: \"Reporte enviado\",\n        description: \"Su reporte ha sido enviado exitosamente.\",\n      });\n      form.reset({\n        driverId,\n        type: undefined,\n        description: \"\",\n      });\n      setOpen(false);\n      \n      // Invalidar las consultas de reportes para refrescar la lista\n      queryClient.invalidateQueries({ queryKey: ['/api/reports'] });\n    },\n    onError: (error: any) => {\n      console.error(\"Error enviando reporte:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo enviar el reporte. Intente nuevamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ReportFormData) => {\n    createReportMutation.mutate(data);\n  };\n\n  const reportTypes = [\n    { value: \"atraso\", label: \"Atraso\" },\n    { value: \"incidente\", label: \"Incidente\" },\n    { value: \"otro\", label: \"Otro\" }\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          className=\"w-full\"\n          data-testid=\"button-report-incident\"\n        >\n          <AlertTriangle className=\"mr-2 h-4 w-4\" />\n          Reportar Incidente\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Reportar Incidente</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tipo de Reporte *</FormLabel>\n                  <FormControl>\n                    <Select \n                      onValueChange={field.onChange} \n                      value={field.value}\n                      data-testid=\"select-report-type\"\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Seleccione el tipo de reporte\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {reportTypes.map((type) => (\n                          <SelectItem \n                            key={type.value} \n                            value={type.value}\n                            data-testid={`option-${type.value}`}\n                          >\n                            {type.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descripción *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Describe brevemente lo ocurrido...\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                      data-testid=\"textarea-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createReportMutation.isPending}\n                data-testid=\"button-send-report\"\n              >\n                {createReportMutation.isPending ? \"Enviando...\" : \"Enviar Reporte\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5968},"client/src/components/reports-table.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Report, User } from \"@shared/schema\";\nimport { AlertTriangle, Clock, MessageCircle } from \"lucide-react\";\n\ninterface ReportWithDriver extends Report {\n  driverName?: string;\n}\n\nexport function ReportsTable() {\n  // Obtener todos los reportes\n  const { data: reports = [], isLoading: reportsLoading } = useQuery<Report[]>({\n    queryKey: ['/api/reports'],\n  });\n\n  // Obtener todos los usuarios para mapear nombres de choferes\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  // Combinar reportes con información del chofer\n  const reportsWithDrivers: ReportWithDriver[] = reports.map(report => {\n    const driver = users.find(user => user.id === report.driverId);\n    return {\n      ...report,\n      driverName: driver?.fullName || 'Chofer desconocido'\n    };\n  });\n\n  // Ordenar por fecha más reciente primero\n  const sortedReports = reportsWithDrivers.sort((a, b) => \n    new Date(b.timestamp || 0).getTime() - new Date(a.timestamp || 0).getTime()\n  );\n\n  const getReportTypeIcon = (type: string) => {\n    switch (type) {\n      case 'atraso':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'incidente':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'otro':\n        return <MessageCircle className=\"w-4 h-4\" />;\n      default:\n        return <MessageCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getReportTypeBadge = (type: string) => {\n    switch (type) {\n      case 'atraso':\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">Atraso</Badge>;\n      case 'incidente':\n        return <Badge variant=\"destructive\">Incidente</Badge>;\n      case 'otro':\n        return <Badge variant=\"outline\">Otro</Badge>;\n      default:\n        return <Badge variant=\"outline\">{type}</Badge>;\n    }\n  };\n\n  const formatDateTime = (timestamp: Date | string | null) => {\n    if (!timestamp) return '-';\n    const date = new Date(timestamp);\n    return date.toLocaleString('es-GT', {\n      timeZone: 'America/Guatemala',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  if (reportsLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n        <p className=\"text-gray-600\">Cargando reportes...</p>\n      </div>\n    );\n  }\n\n  if (sortedReports.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <AlertTriangle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No hay reportes</h3>\n        <p className=\"text-gray-500\">Los reportes de incidentes aparecerán aquí cuando los choferes los envíen.</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* Vista móvil - Cards */}\n      <div className=\"block sm:hidden space-y-3\">\n        {sortedReports.map((report) => (\n          <Card key={report.id} className=\"p-4\" data-testid={`card-report-${report.id}`}>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  {getReportTypeIcon(report.type)}\n                  {getReportTypeBadge(report.type)}\n                </div>\n                <span className=\"text-xs text-gray-500\">\n                  {formatDateTime(report.timestamp)}\n                </span>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900\">{report.driverName}</h4>\n                <p className=\"text-sm text-gray-600 mt-1 line-clamp-3\">\n                  {report.description}\n                </p>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Vista desktop - Tabla */}\n      <div className=\"hidden sm:block overflow-x-auto\">\n        <table className=\"w-full table-auto\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\n                Fecha/Hora\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\n                Chofer\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\n                Tipo\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\n                Descripción\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-gray-200\">\n            {sortedReports.map((report) => (\n              <tr key={report.id} className=\"hover:bg-gray-50\" data-testid={`row-report-${report.id}`}>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">\n                    {formatDateTime(report.timestamp)}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm font-medium text-gray-900\">\n                    {report.driverName}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center space-x-2\">\n                    {getReportTypeIcon(report.type)}\n                    {getReportTypeBadge(report.type)}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4\">\n                  <div className=\"text-sm text-gray-900 max-w-md\">\n                    <p className=\"line-clamp-2\" title={report.description}>\n                      {report.description}\n                    </p>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}","size_bytes":6075},"client/src/components/schedule-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { InsertRoute, insertRouteSchema, Route } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { X } from \"lucide-react\";\n\ninterface ScheduleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  schedule?: Route | null;\n}\n\nexport function ScheduleModal({ isOpen, onClose, schedule }: ScheduleModalProps) {\n  const { toast } = useToast();\n  const isEditing = !!schedule;\n\n  const form = useForm<InsertRoute>({\n    resolver: zodResolver(insertRouteSchema),\n    defaultValues: {\n      routeName: schedule?.routeName || \"\",\n      routeNumber: schedule?.routeNumber || 1,\n      startTime: schedule?.startTime || \"06:00\",\n      endTime: schedule?.endTime || \"22:00\",\n      isActive: schedule?.isActive ?? true,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertRoute) => apiRequest(\"POST\", \"/api/schedules\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedules'] });\n      toast({ \n        title: \"Ruta creada exitosamente\",\n        description: \"La nueva ruta ha sido registrada.\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error al crear ruta\",\n        description: error.message || \"No se pudo crear la ruta\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: InsertRoute) => \n      apiRequest(\"PUT\", `/api/schedules/${schedule?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedules'] });\n      toast({ \n        title: \"Horario actualizado exitosamente\",\n        description: \"Los cambios han sido guardados.\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error al actualizar ruta\",\n        description: error.message || \"No se pudo actualizar la ruta\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertRoute) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex justify-between items-center\">\n            <DialogTitle className=\"text-2xl font-semibold text-gray-800\">\n              {isEditing ? \"Editar Horario\" : \"Nuevo Horario\"}\n            </DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"routeName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nombre de Ruta</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ej: Centro - Universidad\" \n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"routeNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Número de Ruta</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"1\" \n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"startTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Hora de Inicio</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Hora de Fin</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n\n\n            <div className=\"flex space-x-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                disabled={isLoading}\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1 bg-primary hover:bg-primary-dark\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Guardando...\" : (isEditing ? \"Actualizar Horario\" : \"Guardar Horario\")}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6777},"client/src/components/user-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertUserSchema, type InsertUser, type User } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Esquema extendido para el formulario de usuario\nconst userFormSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Confirme la contraseña\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Las contraseñas no coinciden\",\n  path: [\"confirmPassword\"],\n});\n\ntype UserFormData = z.infer<typeof userFormSchema>;\n\ninterface UserModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user?: User | null;\n}\n\nexport function UserModal({ isOpen, onClose, user }: UserModalProps) {\n  const { toast } = useToast();\n  const isEditing = !!user;\n\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      username: user?.username || \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: user?.role || \"driver\",\n      fullName: user?.fullName || \"\",\n      licenseNumber: user?.licenseNumber || \"\",\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: (userData: Omit<UserFormData, \"confirmPassword\">) => \n      apiRequest(\"POST\", \"/api/users\", userData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"Usuario creado\",\n        description: \"El usuario ha sido creado exitosamente\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"No se pudo crear el usuario\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: (userData: Partial<User>) => \n      apiRequest(\"PUT\", `/api/users/${user?.id}`, userData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"Usuario actualizado\",\n        description: \"El usuario ha sido actualizado exitosamente\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"No se pudo actualizar el usuario\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UserFormData) => {\n    const { confirmPassword, ...userData } = data;\n    \n    if (isEditing) {\n      // Si está editando y no cambió la contraseña, no la incluir\n      const updateData = userData.password ? userData : { ...userData, password: undefined };\n      updateUserMutation.mutate(updateData);\n    } else {\n      createUserMutation.mutate(userData);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Editar Usuario\" : \"Crear Nuevo Usuario\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"username\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nombre de Usuario</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"usuario123\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"fullName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nombre Completo</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Juan Pérez García\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Rol</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Seleccione un rol\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"admin\">Administrador</SelectItem>\n                      <SelectItem value=\"driver\">Chofer</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {form.watch(\"role\") === \"driver\" && (\n              <FormField\n                control={form.control}\n                name=\"licenseNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Número de Licencia</FormLabel>\n                    <FormControl>\n                      <Input {...field} value={field.value || \"\"} placeholder=\"LIC123456\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    {isEditing ? \"Nueva Contraseña (dejar vacío para mantener)\" : \"Contraseña\"}\n                  </FormLabel>\n                  <FormControl>\n                    <Input {...field} type=\"password\" placeholder=\"••••••••\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {(!isEditing || form.watch(\"password\")) && (\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirmar Contraseña</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"password\" placeholder=\"••••••••\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={createUserMutation.isPending || updateUserMutation.isPending}\n              >\n                {isEditing ? \"Actualizar\" : \"Crear Usuario\"}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleClose}\n                className=\"flex-1\"\n              >\n                Cancelar\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7841},"client/src/hooks/use-auth.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { authManager, type AuthUser } from '@/lib/auth';\n\nexport function useAuth() {\n  const [user, setUser] = useState<AuthUser | null>(authManager.getCurrentUser());\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Suscribirse a cambios en el estado de autenticación\n    const unsubscribe = authManager.subscribe(setUser);\n    \n    // Verificar sesión al montar el componente\n    const checkSession = async () => {\n      if (user) {\n        await authManager.checkSession();\n      }\n      setLoading(false);\n    };\n    \n    checkSession();\n\n    return unsubscribe;\n  }, [user]);\n\n  const login = authManager.setCurrentUser.bind(authManager);\n  const logout = async () => await authManager.logout();\n  const isAdmin = authManager.isAdmin.bind(authManager);\n  const isDriver = authManager.isDriver.bind(authManager);\n\n  return {\n    user,\n    loading,\n    login,\n    logout,\n    isAdmin,\n    isDriver,\n    isAuthenticated: !!user\n  };\n}","size_bytes":1011},"client/src/hooks/use-geolocation.tsx":{"content":"import { useEffect, useState, useCallback } from 'react';\n\n// Función para calcular distancia entre dos puntos GPS (en metros)\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371e3; // Radio de la Tierra en metros\n  const φ1 = lat1 * Math.PI / 180; // φ, λ en radianes\n  const φ2 = lat2 * Math.PI / 180;\n  const Δφ = (lat2 - lat1) * Math.PI / 180;\n  const Δλ = (lon2 - lon1) * Math.PI / 180;\n\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n            Math.cos(φ1) * Math.cos(φ2) *\n            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  const d = R * c; // en metros\n  return d;\n}\n\ninterface GeolocationState {\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  } | null;\n  isSupported: boolean;\n  error: string | null;\n  isTransmitting: boolean;\n}\n\ninterface UseGeolocationOptions {\n  enableHighAccuracy?: boolean;\n  timeout?: number;\n  maximumAge?: number;\n  onLocationUpdate?: (coordinates: { latitude: number; longitude: number }) => void;\n  onError?: (error: string) => void;\n}\n\nexport function useGeolocation(options: UseGeolocationOptions = {}) {\n  const {\n    enableHighAccuracy = true,\n    timeout = 10000,\n    maximumAge = 30000,\n    onLocationUpdate,\n    onError,\n  } = options;\n\n  const [state, setState] = useState<GeolocationState>({\n    coordinates: null,\n    isSupported: 'geolocation' in navigator,\n    error: null,\n    isTransmitting: false,\n  });\n\n  const [watchId, setWatchId] = useState<number | null>(null);\n  const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [lastKnownPosition, setLastKnownPosition] = useState<GeolocationPosition | null>(null);\n\n  const handleSuccess = useCallback((position: GeolocationPosition) => {\n    const coordinates = {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n    };\n\n    setLastKnownPosition(position);\n    setState(prev => ({\n      ...prev,\n      coordinates,\n      error: null,\n    }));\n\n    onLocationUpdate?.(coordinates);\n  }, [onLocationUpdate]);\n\n  const handleError = useCallback((error: GeolocationPositionError) => {\n    let errorMessage = 'Error desconocido al obtener ubicación.';\n\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        errorMessage = 'Permisos de ubicación denegados.';\n        break;\n      case error.POSITION_UNAVAILABLE:\n        errorMessage = 'Información de ubicación no disponible.';\n        break;\n      case error.TIMEOUT:\n        errorMessage = 'Tiempo de espera agotado al obtener ubicación.';\n        break;\n    }\n\n    setState(prev => ({\n      ...prev,\n      error: errorMessage,\n      isTransmitting: false,\n    }));\n\n    onError?.(errorMessage);\n\n    // Clear watch and interval if there's an error\n    if (watchId !== null) {\n      navigator.geolocation.clearWatch(watchId);\n      setWatchId(null);\n    }\n    if (intervalId !== null) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n  }, [watchId, intervalId, onError]);\n\n  const startTracking = useCallback(() => {\n    if (!state.isSupported) {\n      const error = 'La geolocalización no está soportada por este navegador.';\n      setState(prev => ({ ...prev, error }));\n      onError?.(error);\n      return;\n    }\n\n    if (state.isTransmitting) {\n      return;\n    }\n\n    const options: PositionOptions = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 0, // Siempre obtener ubicación fresca\n    };\n\n    setState(prev => ({\n      ...prev,\n      isTransmitting: true,\n      error: null,\n    }));\n\n    // Función para obtener y enviar ubicación\n    const getCurrentLocationAndSend = () => {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          console.log('🎯 Actualización de ubicación [', new Date().toLocaleTimeString(), ']:', position.coords);\n          console.log('📍 Precisión:', position.coords.accuracy, 'metros');\n          handleSuccess(position);\n        },\n        (error) => {\n          console.error('⚠️ Error obteniendo ubicación:', error);\n          // Si hay error, usar la última posición conocida\n          if (lastKnownPosition) {\n            console.log('📍 Usando última ubicación conocida');\n            handleSuccess(lastKnownPosition);\n          } else {\n            handleError(error);\n          }\n        },\n        options\n      );\n    };\n\n    // Get current position first\n    getCurrentLocationAndSend();\n    \n    // Configurar intervalo para enviar ubicación cada 15 segundos\n    const interval = setInterval(() => {\n      getCurrentLocationAndSend();\n    }, 15000); // 15 segundos\n    \n    setIntervalId(interval);\n    console.log('🚀 Transmisión iniciada: enviando ubicación cada 15 segundos');\n        \n    // También mantener watchPosition como respaldo para cambios significativos\n    const id = navigator.geolocation.watchPosition(\n      (pos) => {\n        // Solo actualizar si ha habido un cambio significativo en la posición\n        if (lastKnownPosition) {\n          const distance = calculateDistance(\n            lastKnownPosition.coords.latitude,\n            lastKnownPosition.coords.longitude,\n            pos.coords.latitude,\n            pos.coords.longitude\n          );\n          if (distance > 10) { // Solo si se movió más de 10 metros\n            console.log('🏃 Cambio significativo de ubicación detectado (', distance.toFixed(1), 'm)');\n            handleSuccess(pos);\n          }\n        } else {\n          handleSuccess(pos);\n        }\n      },\n      handleError,\n      options\n    );\n    \n    setWatchId(id);\n  }, [state.isSupported, state.isTransmitting, enableHighAccuracy, timeout, maximumAge, handleSuccess, handleError, lastKnownPosition, intervalId]);\n\n  const stopTracking = useCallback(() => {\n    if (watchId !== null) {\n      navigator.geolocation.clearWatch(watchId);\n      setWatchId(null);\n    }\n\n    if (intervalId !== null) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n\n    setState(prev => ({\n      ...prev,\n      isTransmitting: false,\n    }));\n    \n    console.log('🛑 Transmisión detenida');\n  }, [watchId, intervalId]);\n\n  useEffect(() => {\n    return () => {\n      if (watchId !== null) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n      if (intervalId !== null) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [watchId, intervalId]);\n\n  return {\n    ...state,\n    startTracking,\n    stopTracking,\n  };\n}\n","size_bytes":6538},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  connectionId?: string;\n  location?: any;\n  driverId?: string;\n  isTransmitting?: boolean;\n}\n\ninterface UseWebSocketOptions {\n  onMessage?: (message: WebSocketMessage) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n}\n\nexport function useWebSocket(options: UseWebSocketOptions = {}) {\n  const [isConnected, setIsConnected] = useState(false);\n  const ws = useRef<WebSocket | null>(null);\n  const { onMessage, onConnect, onDisconnect } = options;\n\n  const connect = () => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      onConnect?.();\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        onMessage?.(message);\n        \n        // Invalidar cache para actualizaciones automáticas\n        if (message.type === 'locationUpdate') {\n          queryClient.invalidateQueries({ queryKey: ['/api/locations'] });\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      setIsConnected(false);\n      onDisconnect?.();\n      \n      // Auto-reconnect after 3 seconds\n      setTimeout(() => {\n        connect();\n      }, 3000);\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  };\n\n  const disconnect = () => {\n    ws.current?.close();\n    ws.current = null;\n    setIsConnected(false);\n  };\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      disconnect();\n    };\n  }, []);\n\n  return {\n    isConnected,\n    sendMessage,\n    connect,\n    disconnect,\n  };\n}\n","size_bytes":2207},"client/src/lib/auth.ts":{"content":"import { User } from \"@shared/schema\";\n\nexport interface AuthUser {\n  id: string;\n  username: string;\n  role: 'admin' | 'driver';\n  fullName: string;\n  licenseNumber: string | null;\n  driverStatus?: string | null;\n}\n\nclass AuthManager {\n  private currentUser: AuthUser | null = null;\n  private listeners: ((user: AuthUser | null) => void)[] = [];\n\n  constructor() {\n    // Restaurar sesión desde localStorage al inicializar\n    this.loadFromStorage();\n  }\n\n  getCurrentUser(): AuthUser | null {\n    return this.currentUser;\n  }\n\n  setCurrentUser(user: AuthUser | null): void {\n    console.log('AuthManager - Estableciendo usuario:', user);\n    this.currentUser = user;\n    if (user) {\n      // Guardar sesión en localStorage\n      localStorage.setItem('busapp_user', JSON.stringify(user));\n      console.log('AuthManager - Usuario guardado en localStorage:', user.id);\n    } else {\n      // Eliminar sesión del localStorage\n      localStorage.removeItem('busapp_user');\n      console.log('AuthManager - Sesión eliminada');\n    }\n    this.notifyListeners();\n  }\n\n  private loadFromStorage(): void {\n    try {\n      const storedUser = localStorage.getItem('busapp_user');\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        console.log('AuthManager - Cargando usuario desde localStorage:', user);\n        \n        // Verificar que el usuario tenga un ID válido\n        if (user && user.id && user.username) {\n          this.currentUser = user;\n        } else {\n          console.warn('AuthManager - Usuario inválido en localStorage, eliminando');\n          localStorage.removeItem('busapp_user');\n        }\n      }\n    } catch (error) {\n      console.error('Error al cargar sesión:', error);\n      localStorage.removeItem('busapp_user');\n    }\n  }\n\n  subscribe(listener: (user: AuthUser | null) => void): () => void {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach(listener => listener(this.currentUser));\n  }\n\n  isAdmin(): boolean {\n    return this.currentUser?.role === 'admin';\n  }\n\n  isDriver(): boolean {\n    return this.currentUser?.role === 'driver';\n  }\n\n  async logout(): Promise<void> {\n    // Si el usuario actual es un chofer, detener transmisión antes de cerrar sesión\n    if (this.currentUser && this.currentUser.role === 'driver') {\n      try {\n        await fetch('/api/locations/stop-transmission', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ driverId: this.currentUser.id })\n        });\n        console.log('AuthManager - Transmisión detenida al cerrar sesión');\n      } catch (error) {\n        console.error('Error deteniendo transmisión al cerrar sesión:', error);\n      }\n    }\n    \n    this.setCurrentUser(null);\n  }\n\n  // Método para verificar y renovar sesión si es necesario\n  async checkSession(): Promise<boolean> {\n    if (!this.currentUser) return false;\n    \n    try {\n      // Verificar que la sesión sigue siendo válida con el servidor\n      const response = await fetch('/api/auth/verify', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId: this.currentUser.id })\n      });\n      \n      if (!response.ok) {\n        console.warn('AuthManager - Sesión inválida en servidor, cerrando sesión');\n        this.logout();\n        return false;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error verificando sesión:', error);\n      return true; // Mantener sesión en caso de error de red\n    }\n  }\n\n  // Método para limpiar y revalidar localStorage\n  clearInvalidSession(): void {\n    console.log('AuthManager - Limpiando sesión inválida');\n    localStorage.removeItem('busapp_user');\n    this.currentUser = null;\n    this.notifyListeners();\n  }\n}\n\nexport const authManager = new AuthManager();\n","size_bytes":4055},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard-old.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { authManager } from \"@/lib/auth\";\nimport { Schedule, Assignment, User, Location } from \"@shared/schema\";\nimport { ScheduleModal } from \"@/components/schedule-modal\";\nimport { AssignmentModal } from \"@/components/assignment-modal\";\nimport { GoogleMap } from \"@/components/google-map\";\nimport { UserModal } from \"@/components/user-modal\";\nimport { ReportsTable } from \"@/components/reports-table\";\nimport { \n  Bus, \n  Users, \n  Route, \n  MapPin, \n  LogOut,\n  Calendar,\n  UserCog,\n  Eye,\n  Plus,\n  Edit,\n  Trash2,\n  Circle,\n  Navigation,\n  UserPlus,\n  Shield,\n  Car,\n  AlertTriangle,\n  Menu,\n  X,\n  BarChart3\n} from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);\n  const [isAssignmentModalOpen, setIsAssignmentModalOpen] = useState(false);\n  const [selectedSchedule, setSelectedSchedule] = useState<Schedule | null>(null);\n  const [activeLocations, setActiveLocations] = useState<Location[]>([]);\n  const [mapCenter, setMapCenter] = useState({ lat: -12.0464, lng: -77.0428 });\n  const [mapZoom, setMapZoom] = useState(12);\n  const mapRef = useRef<any>(null);\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  \n  const { toast } = useToast();\n  const currentUser = authManager.getCurrentUser();\n\n  // WebSocket for real-time updates\n  useWebSocket({\n    onMessage: (message) => {\n      if (message.type === 'locationUpdate') {\n        setActiveLocations(prev => {\n          const updated = [...prev];\n          const index = updated.findIndex(loc => loc.driverId === message.data.driverId);\n          if (index >= 0) {\n            updated[index] = message.data;\n          } else {\n            updated.push(message.data);\n          }\n          return updated;\n        });\n        \n      }\n      \n      // Solo invalidar cache cuando hay cambios en WebSocket\n      if (message.type === 'transmissionStatusUpdate' || \n          message.type === 'transmissionStatus' || \n          message.type === 'transmissionStopped') {\n        // Forzar actualización inmediata de ubicaciones cuando cambia estado\n        queryClient.invalidateQueries({ queryKey: ['/api/locations'] });\n        queryClient.refetchQueries({ queryKey: ['/api/locations'] });\n        \n        // También limpiar el estado local para forzar re-renderización\n        if (message.type === 'transmissionStopped') {\n          console.log('WebSocket - Removiendo chofer del estado local:', message.data.driverId);\n          setActiveLocations(prev => \n            prev.filter(loc => loc.driverId !== message.data.driverId)\n          );\n        }\n        \n        console.log('WebSocket - Actualizando estado de transmisión:', message.type, message.data);\n      }\n    }\n  });\n\n  // Queries\n  const { data: schedules = [], isLoading: schedulesLoading } = useQuery<Schedule[]>({\n    queryKey: ['/api/schedules'],\n  });\n\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: ['/api/assignments'],\n  });\n\n  const { data: drivers = [], isLoading: driversLoading } = useQuery<User[]>({\n    queryKey: ['/api/drivers'],\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  const { data: locations = [] } = useQuery<Location[]>({\n    queryKey: ['/api/locations'],\n    refetchInterval: 5000, // Actualizar cada 5 segundos para debug\n    staleTime: 0, // Considerar datos obsoletos inmediatamente\n    cacheTime: 0, // No mantener en cache\n  });\n\n  // Mutations\n  const deleteScheduleMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/schedules/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedules'] });\n      toast({ title: \"Horario eliminado exitosamente\" });\n    },\n    onError: () => {\n      toast({ \n        variant: \"destructive\", \n        title: \"Error\", \n        description: \"No se pudo eliminar el horario\" \n      });\n    },\n  });\n\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/assignments/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] });\n      toast({ title: \"Asignación eliminada exitosamente\" });\n    },\n    onError: () => {\n      toast({ \n        variant: \"destructive\", \n        title: \"Error\", \n        description: \"No se pudo eliminar la asignación\" \n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/users/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/drivers'] });\n      toast({ title: \"Usuario eliminado exitosamente\" });\n    },\n    onError: () => {\n      toast({ \n        variant: \"destructive\", \n        title: \"Error\", \n        description: \"No se pudo eliminar el usuario\" \n      });\n    },\n  });\n\n  const handleLogout = () => {\n    authManager.logout();\n  };\n\n  // Función para localizar chofer en el mapa\n  const locateDriver = async (driverId: string) => {\n    try {\n      // Buscar la ubicación más reciente del chofer directamente de la API\n      const response = await fetch(`/api/locations`);\n      const allLocations = await response.json();\n      \n      console.log('Todas las ubicaciones:', allLocations);\n      console.log('Buscando chofer:', driverId);\n      \n      // Filtrar por el chofer específico y solo ubicaciones activas\n      const driverLocation = allLocations.find((l: Location) => \n        l.driverId === driverId && l.isTransmitting\n      );\n      \n      console.log('Ubicación encontrada:', driverLocation);\n      \n      if (driverLocation) {\n        const lat = parseFloat(driverLocation.latitude);\n        const lng = parseFloat(driverLocation.longitude);\n        \n        console.log(`Localizando chofer ${driverId} en:`, { lat, lng });\n        \n        setMapCenter({ lat, lng });\n        setMapZoom(16); // Zoom más cercano para ver la ubicación específica\n        \n        toast({\n          title: \"Ubicación encontrada\",\n          description: `Chofer localizado en: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n        });\n      } else {\n        // Verificar si existe ubicación pero no está transmitiendo\n        const driverLocationAny = allLocations.find((l: Location) => l.driverId === driverId);\n        if (driverLocationAny) {\n          console.log(`Chofer ${driverId} tiene ubicación pero no está transmitiendo:`, driverLocationAny);\n          toast({\n            variant: \"destructive\",\n            title: \"Chofer no transmitiendo\",\n            description: `El chofer tiene ubicación guardada pero no está transmitiendo activamente`,\n          });\n        } else {\n          console.log(`No se encontró ubicación para chofer: ${driverId}`);\n          toast({\n            variant: \"destructive\",\n            title: \"Sin ubicación\",\n            description: \"El chofer no ha enviado ninguna ubicación\",\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error al obtener ubicación del chofer:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo obtener la ubicación del chofer\",\n      });\n    }\n  };\n\n  const handleEditSchedule = (schedule: Schedule) => {\n    setSelectedSchedule(schedule);\n    setIsScheduleModalOpen(true);\n  };\n\n  const handleDeleteSchedule = (id: string) => {\n    if (confirm(\"¿Está seguro de que desea eliminar este horario?\")) {\n      deleteScheduleMutation.mutate(id);\n    }\n  };\n\n  const handleDeleteAssignment = (id: string) => {\n    if (confirm(\"¿Está seguro de que desea eliminar esta asignación?\")) {\n      deleteAssignmentMutation.mutate(id);\n    }\n  };\n\n  // Get driver assignments with driver info\n  const assignmentsWithDrivers = assignments.map(assignment => {\n    const driver = drivers.find(d => d.id === assignment.driverId);\n    const schedule = schedules.find(s => s.id === assignment.scheduleId);\n    return { ...assignment, driver, schedule };\n  });\n\n  // Get unique drivers with their assignments (to avoid duplicates in monitoring)\n  const uniqueDriversWithAssignments = drivers.map(driver => {\n    const driverAssignments = assignmentsWithDrivers.filter(a => a.driverId === driver.id);\n    return {\n      driver,\n      assignments: driverAssignments,\n      // Use the first assignment for basic info display\n      firstAssignment: driverAssignments[0] || null\n    };\n  }).filter(item => item.assignments.length > 0); // Only show drivers with assignments\n\n  // Get all drivers as available (allowing multiple assignments per driver)\n  const availableDrivers = drivers;\n\n  // Stats\n  const stats = {\n    totalBuses: schedules.filter(s => s.isActive).length,\n    totalDrivers: drivers.length,\n    totalRoutes: schedules.length,\n    activeTransmissions: locations.filter(l => l.isTransmitting).length,\n  };\n\n  // Configuración de elementos del sidebar\n  const sidebarItems = [\n    {\n      id: \"overview\",\n      label: \"Resumen\",\n      icon: BarChart3,\n      description: \"Estadísticas generales\"\n    },\n    {\n      id: \"schedules\",\n      label: \"Horarios\",\n      icon: Calendar,\n      description: \"Gestión de horarios\"\n    },\n    {\n      id: \"assignments\",\n      label: \"Asignaciones\",\n      icon: UserCog,\n      description: \"Asignar choferes\"\n    },\n    {\n      id: \"monitoring\",\n      label: \"Monitoreo\",\n      icon: MapPin,\n      description: \"Ubicaciones en tiempo real\"\n    },\n    {\n      id: \"users\",\n      label: \"Usuarios\",\n      icon: Users,\n      description: \"Gestión de usuarios\"\n    },\n    {\n      id: \"reports\",\n      label: \"Reportes\",\n      icon: AlertTriangle,\n      description: \"Incidentes reportados\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-neutral flex\">\n      {/* Sidebar */}\n      <div className={`\n        bg-primary text-white transition-all duration-300 ease-in-out\n        ${isMobileMenuOpen ? 'w-64' : 'w-0 lg:w-64'} \n        fixed lg:static inset-y-0 left-0 z-30 overflow-hidden\n      `}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header del sidebar */}\n          <div className=\"flex items-center justify-between p-4 border-b border-primary-foreground/20\">\n            <div className=\"flex items-center space-x-3\">\n              <Bus className=\"w-8 h-8\" />\n              <span className=\"font-bold text-lg\">Admin Panel</span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMobileMenuOpen(false)}\n              className=\"lg:hidden text-white hover:bg-primary-foreground/20\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Navegación */}\n          <nav className=\"flex-1 px-4 py-6\">\n            <ul className=\"space-y-2\">\n              {sidebarItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = activeTab === item.id;\n                \n                return (\n                  <li key={item.id}>\n                    <button\n                      onClick={() => {\n                        setActiveTab(item.id);\n                        setIsMobileMenuOpen(false);\n                      }}\n                      className={`\n                        w-full flex items-center space-x-3 px-3 py-3 rounded-lg text-left transition-colors\n                        ${isActive \n                          ? 'bg-primary-foreground/20 text-white' \n                          : 'text-primary-foreground hover:bg-primary-foreground/10 hover:text-white'\n                        }\n                      `}\n                    >\n                      <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                      <div className=\"min-w-0\">\n                        <div className=\"font-medium\">{item.label}</div>\n                        <div className=\"text-xs text-primary-foreground/70 truncate\">\n                          {item.description}\n                        </div>\n                      </div>\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </nav>\n\n          {/* Footer del sidebar */}\n          <div className=\"p-4 border-t border-primary-foreground/20\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary-foreground/20 rounded-full flex items-center justify-center\">\n                  <Shield className=\"w-4 h-4\" />\n                </div>\n                <div className=\"min-w-0\">\n                  <div className=\"font-medium text-sm truncate\">{currentUser?.fullName}</div>\n                  <div className=\"text-xs text-primary-foreground/70\">Administrador</div>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                className=\"text-primary-foreground hover:bg-primary-foreground/20 hover:text-white\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Overlay para móviles */}\n      {isMobileMenuOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n          onClick={() => setIsMobileMenuOpen(false)}\n        />\n      )}\n\n      {/* Contenido principal */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Header principal */}\n        <header className=\"bg-white shadow-sm border-b\">\n          <div className=\"px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-between h-16\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsMobileMenuOpen(true)}\n                  className=\"lg:hidden\"\n                >\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n                <div>\n                  <h1 className=\"text-xl font-semibold text-gray-900\">\n                    {sidebarItems.find(item => item.id === activeTab)?.label || \"Dashboard\"}\n                  </h1>\n                  <p className=\"text-sm text-gray-500\">\n                    {sidebarItems.find(item => item.id === activeTab)?.description}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Área de contenido */}\n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"px-4 sm:px-6 lg:px-8 py-8\">\n            \n            {/* Sección Resumen */}\n            {activeTab === \"overview\" && (\n              <div className=\"space-y-6\">\n                {/* Dashboard Stats */}\n                <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6\">\n          <Card>\n            <CardContent className=\"p-3 sm:p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-primary bg-opacity-10 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <Bus className=\"text-primary text-lg sm:text-xl\" />\n                </div>\n                <div className=\"ml-2 sm:ml-4 min-w-0\">\n                  <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">{stats.totalBuses}</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Buses Activos</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-3 sm:p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-secondary bg-opacity-10 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <Users className=\"text-secondary text-lg sm:text-xl\" />\n                </div>\n                <div className=\"ml-2 sm:ml-4 min-w-0\">\n                  <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">{stats.totalDrivers}</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Choferes</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-3 sm:p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-accent bg-opacity-10 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <Route className=\"text-accent text-lg sm:text-xl\" />\n                </div>\n                <div className=\"ml-2 sm:ml-4 min-w-0\">\n                  <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">{stats.totalRoutes}</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Rutas</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-3 sm:p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-green-500 bg-opacity-10 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <MapPin className=\"text-green-500 text-lg sm:text-xl\" />\n                </div>\n                <div className=\"ml-2 sm:ml-4 min-w-0\">\n                  <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">{stats.activeTransmissions}</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Transmitiendo</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Card>\n          <Tabs defaultValue=\"schedules\" className=\"w-full\">\n            <div className=\"border-b border-gray-200 overflow-x-auto\">\n              <TabsList className=\"w-full min-w-max justify-start bg-transparent p-0 h-auto\">\n                <TabsTrigger \n                  value=\"schedules\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:text-primary rounded-none whitespace-nowrap px-3 py-2 text-sm\"\n                >\n                  <Calendar className=\"w-4 h-4 mr-1 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Horarios</span>\n                  <span className=\"sm:hidden\">Hor.</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"assignments\"\n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:text-primary rounded-none whitespace-nowrap px-3 py-2 text-sm\"\n                >\n                  <UserCog className=\"w-4 h-4 mr-1 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Asignaciones</span>\n                  <span className=\"sm:hidden\">Asig.</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"users\"\n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:text-primary rounded-none whitespace-nowrap px-3 py-2 text-sm\"\n                >\n                  <Users className=\"w-4 h-4 mr-1 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Usuarios</span>\n                  <span className=\"sm:hidden\">Users</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"monitoring\"\n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:text-primary rounded-none whitespace-nowrap px-3 py-2 text-sm\"\n                >\n                  <Eye className=\"w-4 h-4 mr-1 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Monitoreo</span>\n                  <span className=\"sm:hidden\">Mon.</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"reports\"\n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:text-primary rounded-none whitespace-nowrap px-3 py-2 text-sm\"\n                >\n                  <AlertTriangle className=\"w-4 h-4 mr-1 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Reportes</span>\n                  <span className=\"sm:hidden\">Rep.</span>\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            {/* Schedules Tab */}\n            <TabsContent value=\"schedules\" className=\"p-3 sm:p-6\">\n              <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-4 sm:mb-6\">\n                <h2 className=\"text-lg sm:text-xl font-semibold text-gray-800\">Gestión de Horarios</h2>\n                <Button \n                  onClick={() => {\n                    setSelectedSchedule(null);\n                    setIsScheduleModalOpen(true);\n                  }}\n                  className=\"bg-primary hover:bg-primary-dark w-full sm:w-auto\"\n                  size=\"sm\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  <span className=\"hidden sm:inline\">Nuevo Horario</span>\n                  <span className=\"sm:hidden\">Nuevo</span>\n                </Button>\n              </div>\n\n              {schedulesLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n                  <p className=\"text-gray-600\">Cargando...</p>\n                </div>\n              ) : schedules.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No hay horarios</h3>\n                  <p className=\"text-gray-500\">Crea un horario para comenzar.</p>\n                </div>\n              ) : (\n                <>\n                  {/* Vista móvil - Cards */}\n                  <div className=\"block sm:hidden space-y-3\">\n                    {schedules.map((schedule) => (\n                      <Card key={schedule.id} className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n                            <div className=\"bg-primary text-white rounded-full w-10 h-10 flex items-center justify-center text-sm font-bold flex-shrink-0\">\n                              {schedule.routeNumber}\n                            </div>\n                            <div className=\"min-w-0 flex-1\">\n                              <h4 className=\"font-medium text-gray-900 truncate\">{schedule.routeName}</h4>\n                              <p className=\"text-sm text-gray-600\">{schedule.startTime} - {schedule.endTime}</p>\n                              <Badge \n                                variant={schedule.isActive ? \"default\" : \"secondary\"}\n                                className=\"mt-1\"\n                              >\n                                {schedule.isActive ? \"Activo\" : \"Inactivo\"}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"flex space-x-1 ml-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditSchedule(schedule)}\n                              className=\"p-2\"\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteSchedule(schedule.id)}\n                              className=\"text-red-600 hover:text-red-800 p-2\"\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n\n                  {/* Vista desktop - Tabla */}\n                  <div className=\"hidden sm:block overflow-x-auto\">\n                    <table className=\"w-full table-auto\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Ruta</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Hora Inicio</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Hora Fin</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200\">\n                        {schedules.map((schedule) => (\n                          <tr key={schedule.id}>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center\">\n                                <div className=\"bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3\">\n                                  {schedule.routeNumber}\n                                </div>\n                                <span className=\"font-medium\">{schedule.routeName}</span>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-gray-900\">{schedule.startTime}</td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-gray-900\">{schedule.endTime}</td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Badge variant={schedule.isActive ? \"default\" : \"secondary\"}>\n                                {schedule.isActive ? \"Activo\" : \"Inactivo\"}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEditSchedule(schedule)}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleDeleteSchedule(schedule.id)}\n                                className=\"text-red-600 hover:text-red-800\"\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </>\n              )}\n            </TabsContent>\n\n            {/* Assignments Tab */}\n            <TabsContent value=\"assignments\" className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-800\">Asignación de Turnos</h2>\n                <Button \n                  onClick={() => setIsAssignmentModalOpen(true)}\n                  className=\"bg-primary hover:bg-primary-dark\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Nueva Asignación\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Available Drivers */}\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h3 className=\"font-semibold text-gray-800 mb-4\">Choferes Disponibles</h3>\n                  <div className=\"space-y-3\">\n                    {driversLoading ? (\n                      <p>Cargando...</p>\n                    ) : availableDrivers.length === 0 ? (\n                      <p className=\"text-gray-500\">No hay choferes disponibles</p>\n                    ) : (\n                      availableDrivers.map((driver) => (\n                        <Card key={driver.id} className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center\">\n                              <div className=\"bg-gray-300 rounded-full w-10 h-10 flex items-center justify-center mr-3\">\n                                <Users className=\"text-gray-600 w-5 h-5\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{driver.fullName}</p>\n                                <p className=\"text-sm text-gray-600\">Licencia: {driver.licenseNumber}</p>\n                              </div>\n                            </div>\n                            <Badge variant=\"outline\" className=\"bg-green-100 text-green-800\">\n                              Disponible\n                            </Badge>\n                          </div>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </div>\n\n                {/* Current Assignments */}\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h3 className=\"font-semibold text-gray-800 mb-4\">Asignaciones Actuales</h3>\n                  <div className=\"space-y-3\">\n                    {assignmentsLoading ? (\n                      <p>Cargando...</p>\n                    ) : assignmentsWithDrivers.length === 0 ? (\n                      <p className=\"text-gray-500\">No hay asignaciones</p>\n                    ) : (\n                      assignmentsWithDrivers.map((assignment) => (\n                        <Card key={assignment.id} className=\"p-4\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center\">\n                              <div className=\"bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-2\">\n                                {assignment.schedule?.routeNumber}\n                              </div>\n                              <span className=\"font-medium\">{assignment.driver?.fullName}</span>\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteAssignment(assignment.id)}\n                              className=\"text-red-600 hover:text-red-800\"\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                          <p className=\"text-sm text-gray-600\">{assignment.schedule?.routeName}</p>\n                          <p className=\"text-xs text-gray-500\">{assignment.shiftStart} - {assignment.shiftEnd}</p>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            {/* Monitoring Tab */}\n            <TabsContent value=\"monitoring\" className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-6\">Monitoreo en Tiempo Real</h2>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Map Area */}\n                <div className=\"lg:col-span-2\">\n                  <Card className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"font-semibold text-gray-800\">Ubicaciones en Tiempo Real</h3>\n                      <div className=\"flex items-center space-x-4 text-sm\">\n                        <span className=\"flex items-center text-green-600\">\n                          <Circle className=\"w-2 h-2 mr-1 fill-current\" />\n                          Activos: {locations.filter(l => l.isTransmitting).length}\n                        </span>\n                        <span className=\"text-gray-500\">\n                          Total ubicaciones: {[...locations, ...activeLocations].length}\n                        </span>\n                      </div>\n                    </div>\n                    <GoogleMap \n                      locations={[...locations, ...activeLocations]}\n                      center={mapCenter}\n                      zoom={mapZoom}\n                      className=\"w-full h-96 rounded-lg\"\n                    />\n                  </Card>\n                </div>\n\n                {/* Driver Status */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-gray-800\">Estado de Choferes</h3>\n                  {uniqueDriversWithAssignments.map((driverItem) => {\n                    const { driver, assignments, firstAssignment } = driverItem;\n                    // Buscar ubicación más reciente del chofer en ambas fuentes\n                    const locationFromAPI = locations.find(l => l.driverId === driver.id);\n                    const locationFromWS = activeLocations.find(l => l.driverId === driver.id);\n                    \n                    // Usar la más reciente o la única disponible\n                    const location = locationFromAPI || locationFromWS;\n                    const isTransmitting = location?.isTransmitting || false;\n                    \n                    return (\n                      <Card \n                        key={driver.id} \n                        className={`p-4 border-l-4 ${\n                          isTransmitting ? 'border-green-500' : 'border-gray-300'\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium\">{driver.fullName}</span>\n                          <span className={`flex items-center ${\n                            isTransmitting ? 'text-green-600' : 'text-gray-500'\n                          }`}>\n                            <Circle className=\"w-2 h-2 mr-1 fill-current\" />\n                            {isTransmitting ? 'Transmitiendo' : 'Desconectado'}\n                          </span>\n                        </div>\n                        \n                        {/* Mostrar número de turnos asignados */}\n                        <p className=\"text-sm text-gray-600 mb-1\">\n                          {assignments.length === 1 ? \n                            `1 turno asignado` : \n                            `${assignments.length} turnos asignados`\n                          }\n                        </p>\n                        \n                        {/* Mostrar información del primer turno o el más relevante */}\n                        {firstAssignment && (\n                          <p className=\"text-xs text-gray-500 mb-2\">\n                            Ruta {firstAssignment.schedule?.routeNumber} - {firstAssignment.schedule?.routeName}\n                            {assignments.length > 1 && \" (y otros)\"}\n                          </p>\n                        )}\n                        \n                        <p className=\"text-xs text-gray-500 mb-3\">\n                          {location && location.timestamp ? \n                            `Última actualización: ${new Date(location.timestamp).toLocaleTimeString()}` :\n                            'Sin datos de ubicación'\n                          }\n                        </p>\n                        \n                        {/* Botón Localizar */}\n                        {location && isTransmitting && (\n                          <Button\n                            onClick={() => locateDriver(driver.id)}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"w-full text-xs\"\n                          >\n                            <Navigation className=\"w-3 h-3 mr-1\" />\n                            Localizar en Mapa\n                          </Button>\n                        )}\n                      </Card>\n                    );\n                  })}\n\n                  {uniqueDriversWithAssignments.length === 0 && (\n                    <p className=\"text-gray-500\">No hay choferes asignados</p>\n                  )}\n                </div>\n              </div>\n            </TabsContent>\n\n            {/* Users Tab */}\n            <TabsContent value=\"users\" className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-800\">Gestión de Usuarios</h2>\n                <Button \n                  onClick={() => {\n                    setSelectedUser(null);\n                    setIsUserModalOpen(true);\n                  }}\n                  className=\"bg-primary hover:bg-primary-dark\"\n                >\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Nuevo Usuario\n                </Button>\n              </div>\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full table-auto\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Usuario</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Nombre Completo</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Rol</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Licencia</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Fecha Creación</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200\">\n                    {usersLoading ? (\n                      <tr>\n                        <td colSpan={6} className=\"px-6 py-4 text-center\">Cargando...</td>\n                      </tr>\n                    ) : users.length === 0 ? (\n                      <tr>\n                        <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\n                          No hay usuarios registrados\n                        </td>\n                      </tr>\n                    ) : (\n                      users.map((user) => (\n                        <tr key={user.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-6 py-4\">\n                            <div className=\"flex items-center\">\n                              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-semibold mr-3 ${\n                                user.role === 'admin' ? 'bg-blue-500' : 'bg-green-500'\n                              }`}>\n                                {user.role === 'admin' ? <Shield className=\"w-4 h-4\" /> : <Car className=\"w-4 h-4\" />}\n                              </div>\n                              <span className=\"font-medium\">{user.username}</span>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 text-sm text-gray-900\">{user.fullName}</td>\n                          <td className=\"px-6 py-4\">\n                            <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                              {user.role === 'admin' ? 'Administrador' : 'Chofer'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 text-sm text-gray-500\">\n                            {user.licenseNumber || '-'}\n                          </td>\n                          <td className=\"px-6 py-4 text-sm text-gray-500\">\n                            {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : '-'}\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedUser(user);\n                                  setIsUserModalOpen(true);\n                                }}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => {\n                                  if (confirm(\"¿Está seguro de que desea eliminar este usuario?\")) {\n                                    deleteUserMutation.mutate(user.id);\n                                  }\n                                }}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </TabsContent>\n\n            {/* Reports Tab */}\n            <TabsContent value=\"reports\" className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-800\">Reportes de Choferes</h2>\n              </div>\n\n              <ReportsTable />\n            </TabsContent>\n          </Tabs>\n        </Card>\n      </div>\n\n      {/* Modals */}\n      <ScheduleModal\n        isOpen={isScheduleModalOpen}\n        onClose={() => {\n          setIsScheduleModalOpen(false);\n          setSelectedSchedule(null);\n        }}\n        schedule={selectedSchedule}\n      />\n\n      <AssignmentModal\n        isOpen={isAssignmentModalOpen}\n        onClose={() => setIsAssignmentModalOpen(false)}\n        drivers={availableDrivers}\n        schedules={schedules}\n      />\n\n      <UserModal\n        isOpen={isUserModalOpen}\n        onClose={() => {\n          setIsUserModalOpen(false);\n          setSelectedUser(null);\n        }}\n        user={selectedUser}\n      />\n    </div>\n  );\n}\n","size_bytes":43816},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { authManager } from \"@/lib/auth\";\nimport { Route as RouteType, Assignment, User, Location, Bus } from \"@shared/schema\";\nimport { ScheduleModal } from \"@/components/schedule-modal\";\nimport { AssignmentModal } from \"@/components/assignment-modal\";\nimport { GoogleMap } from \"@/components/google-map\";\nimport { UserModal } from \"@/components/user-modal\";\nimport { BusModal } from \"@/components/bus-modal\";\nimport { ReportsTable } from \"@/components/reports-table\";\nimport { \n  Bus as BusIcon, \n  Users, \n  Route, \n  MapPin, \n  LogOut,\n  Calendar,\n  UserCog,\n  Eye,\n  Plus,\n  Edit,\n  Trash2,\n  Circle,\n  Navigation,\n  UserPlus,\n  Shield,\n  Car,\n  AlertTriangle,\n  Menu,\n  X,\n  BarChart3\n} from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);\n  const [isAssignmentModalOpen, setIsAssignmentModalOpen] = useState(false);\n  const [selectedRoute, setSelectedRoute] = useState<RouteType | null>(null);\n  const [activeLocations, setActiveLocations] = useState<Location[]>([]);\n  const [mapCenter, setMapCenter] = useState({ lat: -12.0464, lng: -77.0428 });\n  const [mapZoom, setMapZoom] = useState(12);\n  const mapRef = useRef<any>(null);\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isBusModalOpen, setIsBusModalOpen] = useState(false);\n  const [selectedBus, setSelectedBus] = useState<Bus | null>(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  \n  const { toast } = useToast();\n  const currentUser = authManager.getCurrentUser();\n\n  // WebSocket for real-time updates\n  useWebSocket({\n    onMessage: (message) => {\n      if (message.type === 'locationUpdate') {\n        setActiveLocations(prev => {\n          const updated = [...prev];\n          const index = updated.findIndex(loc => loc.driverId === message.data.driverId);\n          if (index >= 0) {\n            updated[index] = message.data;\n          } else {\n            updated.push(message.data);\n          }\n          return updated;\n        });\n      }\n      \n      if (message.type === 'transmissionStatusUpdate' || \n          message.type === 'transmissionStatus' || \n          message.type === 'transmissionStopped') {\n        queryClient.invalidateQueries({ queryKey: ['/api/locations'] });\n        queryClient.refetchQueries({ queryKey: ['/api/locations'] });\n      }\n    }\n  });\n\n  const handleLogout = () => {\n    authManager.logout();\n    window.location.href = '/';\n  };\n\n  // Fetch data\n  const { data: schedules = [], isLoading: schedulesLoading } = useQuery<RouteType[]>({\n    queryKey: ['/api/schedules'],\n  });\n\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: ['/api/assignments'],\n  });\n\n  const { data: drivers = [], isLoading: driversLoading } = useQuery<User[]>({\n    queryKey: ['/api/drivers'],\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  const { data: buses = [], isLoading: busesLoading } = useQuery<Bus[]>({\n    queryKey: ['/api/buses'],\n  });\n\n  const { data: locations = [] } = useQuery<Location[]>({\n    queryKey: ['/api/locations'],\n    refetchInterval: 5000,\n  });\n\n  // Helper functions for passenger-like display\n  const formatTime = (timeString: string) => {\n    return new Date(`2000-01-01T${timeString}`).toLocaleTimeString('es-GT', {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'America/Guatemala'\n    });\n  };\n\n  const getDriverStatusDisplay = (driverStatus: string | null | undefined, isTransmitting: boolean) => {\n    if (!isTransmitting) {\n      return {\n        label: \"🔴 Inactivo\",\n        variant: \"secondary\" as const,\n        className: \"\"\n      };\n    }\n\n    const statusLabels: Record<string, { label: string; variant: \"default\" | \"secondary\"; className: string }> = {\n      \"disponible\": { label: \"🟢 Disponible\", variant: \"default\", className: \"bg-green-600\" },\n      \"en_ruta_cargar\": { label: \"🟡 En ruta a cargar\", variant: \"default\", className: \"bg-yellow-600\" },\n      \"en_ruta_descargar\": { label: \"🟠 En ruta a descargar\", variant: \"default\", className: \"bg-orange-600\" },\n      \"cargando\": { label: \"🔵 Cargando\", variant: \"default\", className: \"bg-blue-600\" },\n      \"descargando\": { label: \"🟣 Descargando\", variant: \"default\", className: \"bg-purple-600\" },\n      \"no_disponible\": { label: \"🔴 No disponible\", variant: \"secondary\", className: \"bg-red-600\" }\n    };\n\n    return statusLabels[driverStatus || \"disponible\"] || statusLabels[\"disponible\"];\n  };\n\n  const getRouteInfo = (scheduleId: string) => {\n    return schedules.find((route) => route.id === scheduleId);\n  };\n\n  const getBusInfo = (busId: string) => {\n    return buses.find((bus) => bus.id === busId);\n  };\n\n  const getDriverInfo = (driverId: string) => {\n    return users.find((user) => user.id === driverId);\n  };\n\n  // Mutations\n  const deleteScheduleMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/schedules/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedules'] });\n      toast({ title: \"Horario eliminado correctamente\" });\n    },\n  });\n\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/assignments/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] });\n      toast({ title: \"Asignación eliminada correctamente\" });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/users/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/drivers'] });\n      toast({ title: \"Usuario eliminado correctamente\" });\n    },\n  });\n\n  const deleteBusMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/buses/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/buses'] });\n      toast({ title: \"Bus eliminado correctamente\" });\n    },\n  });\n\n  // Helper functions\n  const handleEditSchedule = (schedule: RouteType) => {\n    setSelectedRoute(schedule);\n    setIsScheduleModalOpen(true);\n  };\n\n  const handleDeleteSchedule = (id: string) => {\n    if (confirm(\"¿Está seguro de que desea eliminar este horario?\")) {\n      deleteScheduleMutation.mutate(id);\n    }\n  };\n\n  const handleDeleteAssignment = (id: string) => {\n    if (confirm(\"¿Está seguro de que desea eliminar esta asignación?\")) {\n      deleteAssignmentMutation.mutate(id);\n    }\n  };\n\n  const handleEditBus = (bus: Bus) => {\n    setSelectedBus(bus);\n    setIsBusModalOpen(true);\n  };\n\n  const handleDeleteBus = (id: string) => {\n    if (confirm(\"¿Está seguro de que desea eliminar este bus?\")) {\n      deleteBusMutation.mutate(id);\n    }\n  };\n\n  const locateDriver = async (driverId: string) => {\n    try {\n      const allLocations = await queryClient.fetchQuery({\n        queryKey: ['/api/locations'],\n      });\n      \n      const driverLocation = (allLocations as Location[]).find((l: Location) => \n        l.driverId === driverId && l.isTransmitting\n      );\n      \n      if (driverLocation) {\n        const lat = parseFloat(driverLocation.latitude);\n        const lng = parseFloat(driverLocation.longitude);\n        \n        setMapCenter({ lat, lng });\n        setMapZoom(16);\n        \n        toast({\n          title: \"Ubicación encontrada\",\n          description: `Chofer localizado en: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n        });\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Sin ubicación\",\n          description: \"El chofer no ha enviado ninguna ubicación\",\n        });\n      }\n    } catch (error) {\n      console.error('Error al obtener ubicación del chofer:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo obtener la ubicación del chofer\",\n      });\n    }\n  };\n\n  // Data processing\n  const assignmentsWithDrivers = assignments.map(assignment => {\n    const driver = drivers.find(d => d.id === assignment.driverId);\n    const schedule = schedules.find(s => s.id === assignment.scheduleId);\n    const bus = buses.find(b => b.id === assignment.busId);\n    return { ...assignment, driver, schedule, bus };\n  });\n\n  const uniqueDriversWithAssignments = drivers.map(driver => {\n    const driverAssignments = assignmentsWithDrivers.filter(a => a.driverId === driver.id);\n    return {\n      driver,\n      assignments: driverAssignments,\n      firstAssignment: driverAssignments[0] || null\n    };\n  }).filter(item => item.assignments.length > 0);\n\n  const availableDrivers = drivers;\n\n  // Stats\n  const stats = {\n    totalBuses: buses.filter(b => b.isActive).length,\n    totalDrivers: drivers.length,\n    totalRoutes: schedules.length,\n    activeTransmissions: locations.filter((l: Location) => l.isTransmitting).length,\n  };\n\n  // Configuración de elementos del sidebar\n  const sidebarItems = [\n    {\n      id: \"overview\",\n      label: \"Resumen\",\n      icon: BarChart3,\n      description: \"Estadísticas generales\"\n    },\n    {\n      id: \"schedules\",\n      label: \"Rutas\",\n      icon: Calendar,\n      description: \"Gestión de rutas\"\n    },\n    {\n      id: \"buses\",\n      label: \"Buses\",\n      icon: Car,\n      description: \"Gestión de buses\"\n    },\n    {\n      id: \"assignments\",\n      label: \"Asignaciones\",\n      icon: UserCog,\n      description: \"Asignar choferes\"\n    },\n    {\n      id: \"monitoring\",\n      label: \"Monitoreo\",\n      icon: MapPin,\n      description: \"Ubicaciones en tiempo real\"\n    },\n    {\n      id: \"users\",\n      label: \"Usuarios\",\n      icon: Users,\n      description: \"Gestión de usuarios\"\n    },\n    {\n      id: \"reports\",\n      label: \"Reportes\",\n      icon: AlertTriangle,\n      description: \"Incidentes reportados\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-neutral flex\">\n      {/* Sidebar */}\n      <div className={`\n        bg-primary text-white transition-all duration-300 ease-in-out\n        ${isMobileMenuOpen ? 'w-64' : 'w-0 lg:w-64'} \n        fixed lg:static inset-y-0 left-0 z-30 overflow-hidden\n      `}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header del sidebar */}\n          <div className=\"flex items-center justify-between p-4 border-b border-primary-foreground/20\">\n            <div className=\"flex items-center space-x-3\">\n              <BusIcon className=\"w-8 h-8\" />\n              <span className=\"font-bold text-lg\">Admin Panel</span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMobileMenuOpen(false)}\n              className=\"lg:hidden text-white hover:bg-primary-foreground/20\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Navegación */}\n          <nav className=\"flex-1 px-4 py-6\">\n            <ul className=\"space-y-2\">\n              {sidebarItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = activeTab === item.id;\n                \n                return (\n                  <li key={item.id}>\n                    <button\n                      onClick={() => {\n                        setActiveTab(item.id);\n                        setIsMobileMenuOpen(false);\n                      }}\n                      className={`\n                        w-full flex items-center space-x-3 px-3 py-3 rounded-lg text-left transition-colors\n                        ${isActive \n                          ? 'bg-primary-foreground/20 text-white' \n                          : 'text-primary-foreground hover:bg-primary-foreground/10 hover:text-white'\n                        }\n                      `}\n                    >\n                      <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                      <div className=\"min-w-0\">\n                        <div className=\"font-medium\">{item.label}</div>\n                        <div className=\"text-xs text-primary-foreground/70 truncate\">\n                          {item.description}\n                        </div>\n                      </div>\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </nav>\n\n          {/* Footer del sidebar */}\n          <div className=\"p-4 border-t border-primary-foreground/20\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary-foreground/20 rounded-full flex items-center justify-center\">\n                  <Shield className=\"w-4 h-4\" />\n                </div>\n                <div className=\"min-w-0\">\n                  <div className=\"font-medium text-sm truncate\">{currentUser?.fullName}</div>\n                  <div className=\"text-xs text-primary-foreground/70\">Administrador</div>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                className=\"text-primary-foreground hover:bg-primary-foreground/20 hover:text-white\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Overlay para móviles */}\n      {isMobileMenuOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n          onClick={() => setIsMobileMenuOpen(false)}\n        />\n      )}\n\n      {/* Contenido principal */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Header principal */}\n        <header className=\"bg-white shadow-sm border-b\">\n          <div className=\"px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-between h-16\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsMobileMenuOpen(true)}\n                  className=\"lg:hidden\"\n                >\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n                <div>\n                  <h1 className=\"text-xl font-semibold text-gray-900\">\n                    {sidebarItems.find(item => item.id === activeTab)?.label || \"Dashboard\"}\n                  </h1>\n                  <p className=\"text-sm text-gray-500\">\n                    {sidebarItems.find(item => item.id === activeTab)?.description}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Área de contenido */}\n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"px-4 sm:px-6 lg:px-8 py-8\">\n            \n            {/* Sección Resumen */}\n            {activeTab === \"overview\" && (\n              <div className=\"space-y-6\">\n                {/* Dashboard Stats */}\n                <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6\">\n                  <Card>\n                    <CardContent className=\"p-3 sm:p-6\">\n                      <div className=\"flex items-center\">\n                        <div className=\"bg-primary bg-opacity-10 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                          <BusIcon className=\"text-primary text-lg sm:text-xl\" />\n                        </div>\n                        <div className=\"ml-2 sm:ml-4 min-w-0\">\n                          <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">{stats.totalBuses}</h3>\n                          <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Buses Activos</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-3 sm:p-6\">\n                      <div className=\"flex items-center\">\n                        <div className=\"bg-secondary bg-opacity-10 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                          <Users className=\"text-secondary text-lg sm:text-xl\" />\n                        </div>\n                        <div className=\"ml-2 sm:ml-4 min-w-0\">\n                          <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">{stats.totalDrivers}</h3>\n                          <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Choferes</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-3 sm:p-6\">\n                      <div className=\"flex items-center\">\n                        <div className=\"bg-accent bg-opacity-10 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                          <Route className=\"text-accent text-lg sm:text-xl\" />\n                        </div>\n                        <div className=\"ml-2 sm:ml-4 min-w-0\">\n                          <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">{stats.totalRoutes}</h3>\n                          <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Rutas</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-3 sm:p-6\">\n                      <div className=\"flex items-center\">\n                        <div className=\"bg-green-500 bg-opacity-10 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                          <MapPin className=\"text-green-500 text-lg sm:text-xl\" />\n                        </div>\n                        <div className=\"ml-2 sm:ml-4 min-w-0\">\n                          <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">{stats.activeTransmissions}</h3>\n                          <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Transmitiendo</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Resumen rápido */}\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Resumen del Sistema</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Total de rutas configuradas</p>\n                        <p className=\"font-medium\">{schedules.length} rutas</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Asignaciones activas</p>\n                        <p className=\"font-medium\">{assignments.length} asignaciones</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Choferes registrados</p>\n                        <p className=\"font-medium\">{drivers.length} choferes</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Usuarios totales</p>\n                        <p className=\"font-medium\">{users.length} usuarios</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Sección Rutas */}\n            {activeTab === \"schedules\" && (\n              <div className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold\">Gestión de Rutas</h2>\n                  <Button\n                    onClick={() => setIsScheduleModalOpen(true)}\n                    className=\"bg-primary hover:bg-primary-dark\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nueva Ruta\n                  </Button>\n                </div>\n\n                <div className=\"hidden lg:block overflow-x-auto\">\n                  <table className=\"w-full table-auto\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Ruta</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Nombre</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Horario</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200\">\n                      {schedulesLoading ? (\n                        <tr>\n                          <td colSpan={5} className=\"px-6 py-4 text-center\">Cargando...</td>\n                        </tr>\n                      ) : schedules.length === 0 ? (\n                        <tr>\n                          <td colSpan={5} className=\"px-6 py-4 text-center text-gray-500\">\n                            No hay rutas configuradas\n                          </td>\n                        </tr>\n                      ) : (\n                        schedules.map((schedule) => (\n                          <tr key={schedule.id} className=\"hover:bg-gray-50\">\n                            <td className=\"px-6 py-4\">\n                              <div className=\"bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold\">\n                                {schedule.routeNumber}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 font-medium\">{schedule.routeName}</td>\n                            <td className=\"px-6 py-4 text-sm text-gray-500\">\n                              {schedule.startTime} - {schedule.endTime}\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <Badge variant={schedule.isActive ? \"default\" : \"secondary\"}>\n                                {schedule.isActive ? \"Activo\" : \"Inactivo\"}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleEditSchedule(schedule)}\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleDeleteSchedule(schedule.id)}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Vista móvil para rutas */}\n                <div className=\"lg:hidden space-y-4\">\n                  {schedulesLoading ? (\n                    <Card>\n                      <CardContent className=\"p-4 text-center\">Cargando...</CardContent>\n                    </Card>\n                  ) : schedules.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"p-4 text-center text-gray-500\">\n                        No hay rutas configuradas\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    schedules.map((schedule) => (\n                      <Card key={schedule.id}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"bg-primary text-white rounded-full w-10 h-10 flex items-center justify-center text-sm font-bold\">\n                                {schedule.routeNumber}\n                              </div>\n                              <div>\n                                <h3 className=\"font-medium\">{schedule.routeName}</h3>\n                                <p className=\"text-sm text-gray-500\">{schedule.startTime} - {schedule.endTime}</p>\n                              </div>\n                            </div>\n                            <Badge variant={schedule.isActive ? \"default\" : \"secondary\"}>\n                              {schedule.isActive ? \"Activo\" : \"Inactivo\"}\n                            </Badge>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleEditSchedule(schedule)}\n                              className=\"flex-1\"\n                            >\n                              <Edit className=\"w-4 h-4 mr-2\" />\n                              Editar\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => handleDeleteSchedule(schedule.id)}\n                              className=\"flex-1\"\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Eliminar\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Sección Buses */}\n            {activeTab === \"buses\" && (\n              <div className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold\">Gestión de Buses</h2>\n                  <Button\n                    onClick={() => {\n                      setSelectedBus(null);\n                      setIsBusModalOpen(true);\n                    }}\n                    className=\"bg-primary hover:bg-primary-dark\"\n                    data-testid=\"button-new-bus\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nuevo Bus\n                  </Button>\n                </div>\n\n                <div className=\"hidden lg:block overflow-x-auto\">\n                  <table className=\"w-full table-auto\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Placa</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Unidad</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Modelo</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Año</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Capacidad</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200\">\n                      {busesLoading ? (\n                        <tr>\n                          <td colSpan={7} className=\"px-6 py-4 text-center\">Cargando...</td>\n                        </tr>\n                      ) : buses.length === 0 ? (\n                        <tr>\n                          <td colSpan={7} className=\"px-6 py-4 text-center text-gray-500\">\n                            No hay buses registrados\n                          </td>\n                        </tr>\n                      ) : (\n                        buses.map((bus) => (\n                          <tr key={bus.id} className=\"hover:bg-gray-50\" data-testid={`row-bus-${bus.id}`}>\n                            <td className=\"px-6 py-4 font-medium\">{bus.plateNumber}</td>\n                            <td className=\"px-6 py-4\">{bus.busNumber}</td>\n                            <td className=\"px-6 py-4\">{bus.model}</td>\n                            <td className=\"px-6 py-4\">{bus.year}</td>\n                            <td className=\"px-6 py-4\">{bus.capacity} pax</td>\n                            <td className=\"px-6 py-4\">\n                              <Badge \n                                variant={\n                                  bus.status === \"disponible\" ? \"default\" :\n                                  bus.status === \"en_servicio\" ? \"secondary\" :\n                                  bus.status === \"mantenimiento\" ? \"outline\" :\n                                  \"destructive\"\n                                }\n                              >\n                                {bus.status === \"disponible\" ? \"Disponible\" :\n                                 bus.status === \"en_servicio\" ? \"En Servicio\" :\n                                 bus.status === \"mantenimiento\" ? \"Mantenimiento\" :\n                                 \"Fuera de Servicio\"}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleEditBus(bus)}\n                                  data-testid={`button-edit-bus-${bus.id}`}\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleDeleteBus(bus.id)}\n                                  data-testid={`button-delete-bus-${bus.id}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Vista móvil para buses */}\n                <div className=\"lg:hidden space-y-4\">\n                  {busesLoading ? (\n                    <Card>\n                      <CardContent className=\"p-4 text-center\">Cargando...</CardContent>\n                    </Card>\n                  ) : buses.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"p-4 text-center text-gray-500\">\n                        No hay buses registrados\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    buses.map((bus) => (\n                      <Card key={bus.id} data-testid={`card-bus-${bus.id}`}>\n                        <CardContent className=\"p-4 space-y-3\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <p className=\"font-semibold text-lg\">{bus.plateNumber}</p>\n                              <p className=\"text-sm text-gray-600\">Unidad #{bus.busNumber}</p>\n                              <p className=\"text-sm text-gray-600\">{bus.model} ({bus.year})</p>\n                              <p className=\"text-sm text-gray-600\">Capacidad: {bus.capacity} pasajeros</p>\n                            </div>\n                            <Badge \n                              variant={\n                                bus.status === \"disponible\" ? \"default\" :\n                                bus.status === \"en_servicio\" ? \"secondary\" :\n                                bus.status === \"mantenimiento\" ? \"outline\" :\n                                \"destructive\"\n                              }\n                            >\n                              {bus.status === \"disponible\" ? \"Disponible\" :\n                               bus.status === \"en_servicio\" ? \"En Servicio\" :\n                               bus.status === \"mantenimiento\" ? \"Mantenimiento\" :\n                               \"Fuera de Servicio\"}\n                            </Badge>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleEditBus(bus)}\n                              className=\"flex-1\"\n                              data-testid={`button-edit-bus-mobile-${bus.id}`}\n                            >\n                              <Edit className=\"w-4 h-4 mr-2\" />\n                              Editar\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => handleDeleteBus(bus.id)}\n                              className=\"flex-1\"\n                              data-testid={`button-delete-bus-mobile-${bus.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Eliminar\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Sección Asignaciones */}\n            {activeTab === \"assignments\" && (\n              <div className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold\">Asignación de Choferes</h2>\n                  <Button\n                    onClick={() => setIsAssignmentModalOpen(true)}\n                    className=\"bg-primary hover:bg-primary-dark\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nueva Asignación\n                  </Button>\n                </div>\n\n                <div className=\"hidden lg:block overflow-x-auto\">\n                  <table className=\"w-full table-auto\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Chofer</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Ruta</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Bus</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Fecha</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Turno</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200\">\n                      {assignmentsLoading ? (\n                        <tr>\n                          <td colSpan={7} className=\"px-6 py-4 text-center\">Cargando...</td>\n                        </tr>\n                      ) : assignmentsWithDrivers.length === 0 ? (\n                        <tr>\n                          <td colSpan={7} className=\"px-6 py-4 text-center text-gray-500\">\n                            No hay asignaciones configuradas\n                          </td>\n                        </tr>\n                      ) : (\n                        assignmentsWithDrivers.map((assignment) => (\n                          <tr key={assignment.id} className=\"hover:bg-gray-50\">\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex items-center\">\n                                <div className=\"bg-secondary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-semibold mr-3\">\n                                  <Car className=\"w-4 h-4\" />\n                                </div>\n                                <span className=\"font-medium\">{assignment.driver?.fullName || 'Sin asignar'}</span>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              {assignment.schedule ? (\n                                <div className=\"flex items-center\">\n                                  <div className=\"bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-2\">\n                                    {assignment.schedule.routeNumber}\n                                  </div>\n                                  <span className=\"text-sm\">{assignment.schedule.routeName}</span>\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-500\">Sin ruta</span>\n                              )}\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              {assignment.bus ? (\n                                <div className=\"flex items-center\">\n                                  <div className=\"bg-blue-100 text-blue-800 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-2\">\n                                    {assignment.bus.busNumber}\n                                  </div>\n                                  <span className=\"text-sm\">{assignment.bus.plateNumber}</span>\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-500\">Sin bus</span>\n                              )}\n                            </td>\n                            <td className=\"px-6 py-4 text-sm text-gray-500\">{assignment.assignedDate}</td>\n                            <td className=\"px-6 py-4 text-sm text-gray-500\">\n                              {assignment.shiftStart} - {assignment.shiftEnd}\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <Badge variant={assignment.isActive ? \"default\" : \"secondary\"}>\n                                {assignment.isActive ? \"Activo\" : \"Inactivo\"}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => handleDeleteAssignment(assignment.id)}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Vista móvil para asignaciones */}\n                <div className=\"lg:hidden space-y-4\">\n                  {assignmentsLoading ? (\n                    <Card>\n                      <CardContent className=\"p-4 text-center\">Cargando...</CardContent>\n                    </Card>\n                  ) : assignmentsWithDrivers.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"p-4 text-center text-gray-500\">\n                        No hay asignaciones configuradas\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    assignmentsWithDrivers.map((assignment) => (\n                      <Card key={assignment.id}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"bg-secondary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm\">\n                                  <Car className=\"w-4 h-4\" />\n                                </div>\n                                <span className=\"font-medium text-sm\">{assignment.driver?.fullName || 'Sin asignar'}</span>\n                              </div>\n                              <Badge variant={assignment.isActive ? \"default\" : \"secondary\"}>\n                                {assignment.isActive ? \"Activo\" : \"Inactivo\"}\n                              </Badge>\n                            </div>\n                            \n                            {assignment.schedule && (\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold\">\n                                  {assignment.schedule.routeNumber}\n                                </div>\n                                <span className=\"text-sm\">{assignment.schedule.routeName}</span>\n                              </div>\n                            )}\n                            \n                            {assignment.bus && (\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"bg-blue-100 text-blue-800 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold\">\n                                  {assignment.bus.busNumber}\n                                </div>\n                                <span className=\"text-sm\">{assignment.bus.plateNumber} - {assignment.bus.model}</span>\n                              </div>\n                            )}\n                            \n                            <div className=\"text-xs text-gray-500 space-y-1\">\n                              <p>Fecha: {assignment.assignedDate}</p>\n                              <p>Turno: {assignment.shiftStart} - {assignment.shiftEnd}</p>\n                            </div>\n                            \n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => handleDeleteAssignment(assignment.id)}\n                              className=\"w-full\"\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Eliminar Asignación\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Sección Monitoreo */}\n            {activeTab === \"monitoring\" && (\n              <div className=\"space-y-6\">\n                <h2 className=\"text-xl font-semibold\">Monitoreo en Tiempo Real</h2>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  {/* Estado de choferes */}\n                  <div className=\"lg:col-span-1\">\n                    <Card>\n                      <CardContent className=\"p-4 sm:p-6\">\n                        <h3 className=\"text-lg font-semibold mb-4\">Estado de Choferes</h3>\n                        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                          {assignments.length === 0 ? (\n                            <div className=\"text-center py-4\">\n                              <Car className=\"h-12 w-12 text-gray-300 mx-auto mb-2\" />\n                              <p className=\"text-gray-500\">No hay asignaciones programadas</p>\n                            </div>\n                          ) : (\n                            assignments\n                              .sort((a, b) => a.shiftStart.localeCompare(b.shiftStart))\n                              .map((assignment, index) => {\n                                const route = getRouteInfo(assignment.scheduleId);\n                                const driver = getDriverInfo(assignment.driverId);\n                                const bus = getBusInfo(assignment.busId);\n                                const driverLocation = locations.find(loc => loc.driverId === assignment.driverId);\n                                const isTransmitting = driverLocation?.isTransmitting || false;\n                                \n                                return (\n                                  <div key={assignment.id} className=\"p-3 border rounded-lg hover:bg-gray-50\">\n                                    <div className=\"flex items-center justify-between mb-2\">\n                                      <div className=\"flex-1\">\n                                        <p className=\"font-medium text-sm\" data-testid={`text-route-${index}`}>\n                                          {route?.routeName || 'Ruta sin nombre'}\n                                        </p>\n                                        <p className=\"text-xs text-gray-600\">\n                                          {formatTime(assignment.shiftStart)} - {formatTime(assignment.shiftEnd)}\n                                        </p>\n                                        <div className=\"mt-1 space-y-1\">\n                                          <p className=\"text-xs text-gray-500 flex items-center\">\n                                            <span className=\"mr-1\">👤</span>\n                                            {driver?.fullName || 'No asignado'}\n                                          </p>\n                                          <p className=\"text-xs text-gray-500 flex items-center\">\n                                            <span className=\"mr-1\">🚌</span>\n                                            {bus?.model || 'No especificado'} ({bus?.busNumber || 'N/A'})\n                                          </p>\n                                        </div>\n                                      </div>\n                                      <div className=\"flex flex-col items-end space-y-2\">\n                                        {(() => {\n                                          const statusDisplay = getDriverStatusDisplay(driver?.driverStatus, isTransmitting);\n                                          return (\n                                            <Badge \n                                              variant={statusDisplay.variant}\n                                              className={`${statusDisplay.className} text-xs`}\n                                              data-testid={`badge-status-${index}`}\n                                            >\n                                              {statusDisplay.label}\n                                            </Badge>\n                                          );\n                                        })()}\n                                        {isTransmitting && (\n                                          <Button\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                            onClick={() => locateDriver(assignment.driverId)}\n                                            data-testid={`button-track-driver-${index}`}\n                                          >\n                                            <Navigation className=\"h-3 w-3\" />\n                                          </Button>\n                                        )}\n                                      </div>\n                                    </div>\n                                  </div>\n                                );\n                              })\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Mapa */}\n                  <div className=\"lg:col-span-2\">\n                    <Card>\n                      <CardContent className=\"p-4 sm:p-6\">\n                        <h3 className=\"text-lg font-semibold mb-4\">Mapa de Ubicaciones</h3>\n                        <div className=\"h-96 bg-gray-100 rounded-lg overflow-hidden\">\n                          <GoogleMap\n                            center={mapCenter}\n                            zoom={mapZoom}\n                            locations={locations.filter((l: Location) => l.isTransmitting)}\n                          />\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Sección Usuarios */}\n            {activeTab === \"users\" && (\n              <div className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold\">Gestión de Usuarios</h2>\n                  <Button\n                    onClick={() => {\n                      setSelectedUser(null);\n                      setIsUserModalOpen(true);\n                    }}\n                    className=\"bg-primary hover:bg-primary-dark\"\n                  >\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Nuevo Usuario\n                  </Button>\n                </div>\n\n                <div className=\"hidden lg:block overflow-x-auto\">\n                  <table className=\"w-full table-auto\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Usuario</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Nombre Completo</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Rol</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Licencia</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200\">\n                      {usersLoading ? (\n                        <tr>\n                          <td colSpan={5} className=\"px-6 py-4 text-center\">Cargando...</td>\n                        </tr>\n                      ) : users.length === 0 ? (\n                        <tr>\n                          <td colSpan={5} className=\"px-6 py-4 text-center text-gray-500\">\n                            No hay usuarios registrados\n                          </td>\n                        </tr>\n                      ) : (\n                        users.map((user) => (\n                          <tr key={user.id} className=\"hover:bg-gray-50\">\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex items-center\">\n                                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-semibold mr-3 ${\n                                  user.role === 'admin' ? 'bg-blue-500' : 'bg-green-500'\n                                }`}>\n                                  {user.role === 'admin' ? <Shield className=\"w-4 h-4\" /> : <Car className=\"w-4 h-4\" />}\n                                </div>\n                                <span className=\"font-medium\">{user.username}</span>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 text-sm text-gray-900\">{user.fullName}</td>\n                            <td className=\"px-6 py-4\">\n                              <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                                {user.role === 'admin' ? 'Administrador' : 'Chofer'}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 text-sm text-gray-500\">\n                              {user.licenseNumber || '-'}\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"flex space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    setSelectedUser(user);\n                                    setIsUserModalOpen(true);\n                                  }}\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => {\n                                    if (confirm(\"¿Está seguro de que desea eliminar este usuario?\")) {\n                                      deleteUserMutation.mutate(user.id);\n                                    }\n                                  }}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Vista móvil para usuarios */}\n                <div className=\"lg:hidden space-y-4\">\n                  {usersLoading ? (\n                    <Card>\n                      <CardContent className=\"p-4 text-center\">Cargando...</CardContent>\n                    </Card>\n                  ) : users.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"p-4 text-center text-gray-500\">\n                        No hay usuarios registrados\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    users.map((user) => (\n                      <Card key={user.id}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm ${\n                                  user.role === 'admin' ? 'bg-blue-500' : 'bg-green-500'\n                                }`}>\n                                  {user.role === 'admin' ? <Shield className=\"w-4 h-4\" /> : <Car className=\"w-4 h-4\" />}\n                                </div>\n                                <div>\n                                  <p className=\"font-medium text-sm\">{user.username}</p>\n                                  <p className=\"text-xs text-gray-500\">{user.fullName}</p>\n                                </div>\n                              </div>\n                              <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                                {user.role === 'admin' ? 'Admin' : 'Chofer'}\n                              </Badge>\n                            </div>\n                            \n                            {user.licenseNumber && (\n                              <div className=\"text-xs text-gray-500\">\n                                Licencia: {user.licenseNumber}\n                              </div>\n                            )}\n                            \n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedUser(user);\n                                  setIsUserModalOpen(true);\n                                }}\n                                className=\"flex-1\"\n                              >\n                                <Edit className=\"w-4 h-4 mr-2\" />\n                                Editar\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => {\n                                  if (confirm(\"¿Está seguro de que desea eliminar este usuario?\")) {\n                                    deleteUserMutation.mutate(user.id);\n                                  }\n                                }}\n                                className=\"flex-1\"\n                              >\n                                <Trash2 className=\"w-4 h-4 mr-2\" />\n                                Eliminar\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Sección Reportes */}\n            {activeTab === \"reports\" && (\n              <div className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold\">Reportes de Incidentes</h2>\n                </div>\n                <ReportsTable />\n              </div>\n            )}\n\n          </div>\n        </main>\n      </div>\n\n      {/* Modals */}\n      <ScheduleModal\n        isOpen={isScheduleModalOpen}\n        onClose={() => {\n          setIsScheduleModalOpen(false);\n          setSelectedRoute(null);\n        }}\n        schedule={selectedRoute}\n      />\n\n      <AssignmentModal\n        isOpen={isAssignmentModalOpen}\n        onClose={() => setIsAssignmentModalOpen(false)}\n        drivers={availableDrivers}\n        schedules={schedules}\n        buses={buses}\n      />\n\n      <UserModal\n        isOpen={isUserModalOpen}\n        onClose={() => {\n          setIsUserModalOpen(false);\n          setSelectedUser(null);\n        }}\n        user={selectedUser}\n      />\n\n      <BusModal\n        isOpen={isBusModalOpen}\n        onClose={() => {\n          setIsBusModalOpen(false);\n          setSelectedBus(null);\n        }}\n        bus={selectedBus}\n      />\n    </div>\n  );\n}","size_bytes":60458},"client/src/pages/driver-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authManager } from \"@/lib/auth\";\nimport { Assignment, Route as RouteType } from \"@shared/schema\";\nimport { \n  Compass, \n  LogOut,\n  MapPin,\n  Play,\n  Square,\n  Clock,\n  Route,\n  Circle,\n  CheckCircle,\n  StopCircle,\n  List,\n  Calendar,\n  Menu,\n  X,\n  Home,\n  Car,\n  AlertTriangle,\n  RefreshCw\n} from \"lucide-react\";\nimport { StatusModal } from \"@/components/status-modal\";\n\nexport default function DriverDashboard() {\n  const [isTransmitting, setIsTransmitting] = useState(false);\n  const [showShiftQueue, setShowShiftQueue] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"home\");\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [transmissionInterval, setTransmissionInterval] = useState<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n  const currentUser = authManager.getCurrentUser();\n\n  // Debug: Verificar usuario actual\n  console.log('Usuario actual en dashboard chofer:', currentUser);\n\n  // WebSocket connection\n  const { sendMessage, isConnected } = useWebSocket({\n    onConnect: () => {\n      console.log('WebSocket connected');\n    },\n    onDisconnect: () => {\n      console.log('WebSocket disconnected');\n    }\n  });\n\n  // Función para detener transmisión\n  const stopTransmissionSafely = async () => {\n    if (currentUser && currentUser.role === 'driver') {\n      try {\n        await apiRequest(\"POST\", \"/api/locations/stop-transmission\", {\n          driverId: currentUser.id\n        });\n        console.log('Transmisión detenida correctamente');\n      } catch (error) {\n        console.error('Error deteniendo transmisión:', error);\n      }\n    }\n  };\n\n  // Detectar cuando se cierra la página\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (isTransmitting && currentUser && currentUser.role === 'driver') {\n        // Usar sendBeacon para garantizar que la petición se envíe antes de cerrar\n        const data = JSON.stringify({ driverId: currentUser.id });\n        const blob = new Blob([data], { type: 'application/json' });\n        navigator.sendBeacon('/api/locations/stop-transmission', blob);\n        console.log('Transmisión detenida por cierre de página');\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    \n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isTransmitting, currentUser]);\n\n  // Geolocation hook\n  const { \n    coordinates, \n    error: locationError, \n    startTracking, \n    stopTracking,\n    isSupported \n  } = useGeolocation({\n    onLocationUpdate: (coords) => {\n      if (isTransmitting && currentUser) {\n        const timestamp = new Date().toISOString();\n        console.log(`Nueva ubicación obtenida [${timestamp}]:`, coords);\n        \n        // Send location update via API\n        apiRequest(\"POST\", \"/api/locations\", {\n          driverId: currentUser.id,\n          latitude: coords.latitude.toString(),\n          longitude: coords.longitude.toString(),\n          isTransmitting: true,\n        }).then(response => {\n          console.log(`Ubicación enviada exitosamente [${timestamp}]:`, response);\n        }).catch(error => {\n          console.error(`Error enviando ubicación [${timestamp}]:`, error);\n        });\n\n        // Also send via WebSocket for real-time updates\n        sendMessage({\n          type: 'locationUpdate',\n          location: {\n            driverId: currentUser.id,\n            latitude: coords.latitude.toString(),\n            longitude: coords.longitude.toString(),\n            isTransmitting: true,\n            timestamp: timestamp\n          }\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error de ubicación\",\n        description: error,\n      });\n      setIsTransmitting(false);\n    }\n  });\n\n  // Query para obtener turnos actual y siguiente\n  const { data: shifts, isLoading: shiftsLoading, error: shiftsError } = useQuery<{\n    current: Assignment | null,\n    next: Assignment | null\n  }>({\n    queryKey: ['/api/assignments/driver', currentUser?.id, 'shifts'],\n    queryFn: async () => {\n      if (!currentUser?.id) return { current: null, next: null };\n      const response = await fetch(`/api/assignments/driver/${currentUser.id}/shifts`);\n      if (!response.ok) {\n        throw new Error(`Error loading shifts: ${response.status}`);\n      }\n      return response.json();\n    },\n    enabled: !!currentUser?.id,\n    refetchInterval: 60000, // Refrescar cada minuto para actualizar turnos\n  });\n\n  // Query para schedule del turno actual\n  const { data: currentSchedule, isLoading: currentScheduleLoading } = useQuery<RouteType>({\n    queryKey: ['/api/schedules', shifts?.current?.scheduleId],\n    queryFn: async () => {\n      if (!shifts?.current?.scheduleId) return null;\n      const response = await fetch(`/api/schedules/${shifts.current.scheduleId}`);\n      if (!response.ok) {\n        throw new Error(`Error loading current schedule: ${response.status}`);\n      }\n      return response.json();\n    },\n    enabled: !!shifts?.current?.scheduleId,\n  });\n\n  // Query para schedule del turno siguiente\n  const { data: nextSchedule, isLoading: nextScheduleLoading } = useQuery<RouteType>({\n    queryKey: ['/api/schedules', shifts?.next?.scheduleId],\n    queryFn: async () => {\n      if (!shifts?.next?.scheduleId) return null;\n      const response = await fetch(`/api/schedules/${shifts.next.scheduleId}`);\n      if (!response.ok) {\n        throw new Error(`Error loading next schedule: ${response.status}`);\n      }\n      return response.json();\n    },\n    enabled: !!shifts?.next?.scheduleId,\n  });\n\n  // Query para obtener todos los turnos del día (cola de turnos)\n  const { data: allTodayShifts = [], isLoading: allShiftsLoading } = useQuery<Assignment[]>({\n    queryKey: ['/api/assignments/driver', currentUser?.id, 'all'],\n    queryFn: async () => {\n      if (!currentUser?.id) return [];\n      const response = await fetch(`/api/assignments/driver/${currentUser.id}`);\n      if (!response.ok) {\n        throw new Error(`Error loading all shifts: ${response.status}`);\n      }\n      return response.json();\n    },\n    enabled: !!currentUser?.id && showShiftQueue,\n    refetchInterval: 30000, // Actualizar cada 30 segundos\n  });\n\n  // Debug data\n  console.log('Shifts data:', shifts);\n  console.log('Current schedule:', currentSchedule);\n  console.log('Next schedule:', nextSchedule);\n\n  const handleToggleTransmission = () => {\n    if (!isSupported) {\n      toast({\n        variant: \"destructive\",\n        title: \"Geolocalización no soportada\",\n        description: \"Su navegador no soporta geolocalización.\",\n      });\n      return;\n    }\n\n    if (!isTransmitting) {\n      console.log('🚀 Iniciando transmisión de ubicación...');\n      \n      setIsTransmitting(true);\n      \n      // Enviar ubicación inmediatamente\n      forceLocationUpdate();\n      \n      // Configurar intervalo para enviar ubicación cada 15 segundos\n      const interval = setInterval(() => {\n        console.log('⏰ Ejecutando envío programado de ubicación...');\n        forceLocationUpdate();\n      }, 15000); // 15 segundos\n      \n      setTransmissionInterval(interval);\n      \n      // Notify server about transmission status\n      if (currentUser) {\n        sendMessage({\n          type: 'transmissionStatus',\n          driverId: currentUser.id,\n          isTransmitting: true\n        });\n      }\n\n      toast({\n        title: \"Transmisión iniciada\",\n        description: \"Su ubicación se está compartiendo cada 15 segundos.\",\n      });\n    } else {\n      console.log('🛑 Deteniendo transmisión de ubicación...');\n      setIsTransmitting(false);\n      \n      // Limpiar intervalo\n      if (transmissionInterval) {\n        clearInterval(transmissionInterval);\n        setTransmissionInterval(null);\n        console.log('🗑️ Intervalo de transmisión eliminado');\n      }\n      \n      // Detener transmisión usando el endpoint específico\n      if (currentUser) {\n        stopTransmissionSafely();\n        \n        sendMessage({\n          type: 'transmissionStatus',\n          driverId: currentUser.id,\n          isTransmitting: false\n        });\n      }\n\n      toast({\n        title: \"Transmisión detenida\",\n        description: \"Ha dejado de compartir su ubicación.\",\n      });\n    }\n  };\n\n  const handleLogout = async () => {\n    if (isTransmitting) {\n      setIsTransmitting(false);\n      if (transmissionInterval) {\n        clearInterval(transmissionInterval);\n        setTransmissionInterval(null);\n      }\n    }\n    await authManager.logout();\n    window.location.href = '/';\n  };\n\n  // Limpiar intervalo al desmontar el componente\n  useEffect(() => {\n    return () => {\n      if (transmissionInterval) {\n        clearInterval(transmissionInterval);\n      }\n    };\n  }, [transmissionInterval]);\n\n  // Función para forzar una obtención de ubicación nueva\n  const forceLocationUpdate = () => {\n    if (!currentUser) return;\n    \n    console.log('Forzando obtención de nueva ubicación...');\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const coords = position.coords;\n        const timestamp = new Date().toISOString();\n        console.log(`Ubicación forzada obtenida [${timestamp}]:`, coords);\n        \n        // Enviar inmediatamente via API\n        apiRequest(\"POST\", \"/api/locations\", {\n          driverId: currentUser.id,\n          latitude: coords.latitude.toString(),\n          longitude: coords.longitude.toString(),\n          isTransmitting: true,\n        }).then(response => {\n          console.log('Ubicación forzada enviada:', response);\n          toast({\n            title: \"Ubicación actualizada\",\n            description: `Nueva posición: ${coords.latitude.toFixed(4)}, ${coords.longitude.toFixed(4)}`,\n          });\n        }).catch(error => {\n          console.error('Error enviando ubicación forzada:', error);\n        });\n      },\n      (error) => {\n        console.error('Error obteniendo ubicación forzada:', error);\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: \"No se pudo obtener la ubicación actual\",\n        });\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 0 // Siempre fresco\n      }\n    );\n  };\n\n  // Calculate remaining time in current shift\n  const getRemainingTime = () => {\n    if (!shifts?.current) return null;\n    \n    const now = new Date();\n    const [endHour, endMinute] = shifts.current.shiftEnd.split(':').map(Number);\n    const endTime = new Date();\n    endTime.setHours(endHour, endMinute, 0, 0);\n    \n    if (endTime < now) {\n      return \"Turno finalizado\";\n    }\n    \n    const diff = endTime.getTime() - now.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    \n    return `${hours}h ${minutes}m`;\n  };\n\n  const routeStops = [\n    { name: \"Terminal Central\", type: \"start\" },\n    { name: \"Plaza Mayor\", type: \"stop\" },\n    { name: \"Hospital Regional\", type: \"stop\" },\n    { name: \"Universidad Nacional\", type: \"end\" },\n  ];\n\n  // Ya no necesitamos este loading global, se maneja individualmente en cada sección\n\n  // Configuración de elementos del sidebar del chofer\n  const sidebarItems = [\n    {\n      id: \"home\",\n      label: \"Inicio\",\n      icon: Home,\n      description: \"Control de ubicación\"\n    },\n    {\n      id: \"shifts\",\n      label: \"Mis Turnos\",\n      icon: Calendar,\n      description: \"Turnos asignados\"\n    },\n    {\n      id: \"status\",\n      label: \"Estado\",\n      icon: RefreshCw,\n      description: \"Actualizar estado\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-neutral flex\">\n      {/* Sidebar */}\n      <div className={`\n        bg-secondary text-white transition-all duration-300 ease-in-out\n        ${isMobileMenuOpen ? 'w-64' : 'w-0 lg:w-64'} \n        fixed lg:static inset-y-0 left-0 z-30 overflow-hidden\n      `}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header del sidebar */}\n          <div className=\"flex items-center justify-between p-4 border-b border-secondary-foreground/20\">\n            <div className=\"flex items-center space-x-3\">\n              <Compass className=\"w-8 h-8\" />\n              <span className=\"font-bold text-lg\">Panel Chofer</span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMobileMenuOpen(false)}\n              className=\"lg:hidden text-white hover:bg-secondary-foreground/20\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Navegación */}\n          <nav className=\"flex-1 px-4 py-6\">\n            <ul className=\"space-y-2\">\n              {sidebarItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = activeTab === item.id;\n                \n                return (\n                  <li key={item.id}>\n                    <button\n                      onClick={() => {\n                        setActiveTab(item.id);\n                        setIsMobileMenuOpen(false);\n                      }}\n                      className={`\n                        w-full flex items-center space-x-3 px-3 py-3 rounded-lg text-left transition-colors\n                        ${isActive \n                          ? 'bg-secondary-foreground/20 text-white' \n                          : 'text-secondary-foreground hover:bg-secondary-foreground/10 hover:text-white'\n                        }\n                      `}\n                    >\n                      <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                      <div className=\"min-w-0\">\n                        <div className=\"font-medium\">{item.label}</div>\n                        <div className=\"text-xs text-secondary-foreground/70 truncate\">\n                          {item.description}\n                        </div>\n                      </div>\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </nav>\n\n          {/* Footer del sidebar */}\n          <div className=\"p-4 border-t border-secondary-foreground/20\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-secondary-foreground/20 rounded-full flex items-center justify-center\">\n                  <Car className=\"w-4 h-4\" />\n                </div>\n                <div className=\"min-w-0\">\n                  <div className=\"font-medium text-sm truncate\">{currentUser?.fullName}</div>\n                  <div className=\"text-xs text-secondary-foreground/70\">Chofer</div>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                className=\"text-secondary-foreground hover:bg-secondary-foreground/20 hover:text-white\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Overlay para móviles */}\n      {isMobileMenuOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n          onClick={() => setIsMobileMenuOpen(false)}\n        />\n      )}\n\n      {/* Contenido principal */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Header principal */}\n        <header className=\"bg-white shadow-sm border-b\">\n          <div className=\"px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-between h-16\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsMobileMenuOpen(true)}\n                  className=\"lg:hidden\"\n                >\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n                <div>\n                  <h1 className=\"text-xl font-semibold text-gray-900\">\n                    {sidebarItems.find(item => item.id === activeTab)?.label || \"Dashboard\"}\n                  </h1>\n                  <p className=\"text-sm text-gray-500\">\n                    {sidebarItems.find(item => item.id === activeTab)?.description}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Área de contenido */}\n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"px-4 sm:px-6 lg:px-8 py-8\">\n\n            {/* Sección Inicio - Control de Ubicación */}\n            {activeTab === \"home\" && (\n              <div className=\"space-y-6\">\n                {/* Location Control Card */}\n                <Card className=\"mb-6 sm:mb-8\">\n          <CardContent className=\"p-4 sm:p-6 text-center\">\n            <h2 className=\"text-xl sm:text-2xl font-semibold text-gray-800 mb-4\">Control de Ubicación</h2>\n            \n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <MapPin \n                  className={`text-4xl ${\n                    isTransmitting ? 'text-green-500' : 'text-gray-400'\n                  }`} \n                />\n              </div>\n              <p className={`mb-4 ${\n                isTransmitting ? 'text-green-600 font-medium' : 'text-gray-600'\n              }`}>\n                Estado: {isTransmitting ? 'Transmitiendo ubicación' : 'Desconectado'}\n              </p>\n              {isTransmitting && (\n                <p className=\"text-sm text-gray-500\">\n                  Ubicación compartida cada 30 segundos\n                </p>\n              )}\n              {locationError && (\n                <p className=\"text-sm text-red-500 mb-2\">{locationError}</p>\n              )}\n              {coordinates && isTransmitting && (\n                <p className=\"text-xs text-gray-500\">\n                  Lat: {coordinates.latitude.toFixed(6)}, Lng: {coordinates.longitude.toFixed(6)}\n                </p>\n              )}\n            </div>\n\n            <Button\n              onClick={handleToggleTransmission}\n              className={`px-8 py-4 text-lg font-semibold ${\n                isTransmitting \n                  ? 'bg-red-500 hover:bg-red-600' \n                  : 'bg-accent hover:bg-accent-dark'\n              }`}\n              disabled={!isSupported}\n            >\n              {isTransmitting ? (\n                <>\n                  <Square className=\"w-5 h-5 mr-2\" />\n                  Detener Transmisión\n                </>\n              ) : (\n                <>\n                  <Play className=\"w-5 h-5 mr-2\" />\n                  Iniciar Transmisión\n                </>\n              )}\n            </Button>\n\n            {!isSupported && (\n              <p className=\"text-sm text-red-500 mt-2\">\n                Su navegador no soporta geolocalización\n              </p>\n            )}\n\n            <div className=\"mt-4 flex items-center justify-center space-x-4 text-sm\">\n              <div className=\"flex items-center\">\n                <Circle className={`w-3 h-3 mr-1 ${isConnected ? 'text-green-500 fill-current' : 'text-red-500'}`} />\n                WebSocket: {isConnected ? 'Conectado' : 'Desconectado'}\n              </div>\n            </div>\n\n            {/* Botón de actualizar estado */}\n            {currentUser && (\n              <div className=\"mt-6 max-w-xs mx-auto\">\n                <StatusModal \n                  driverId={currentUser.id} \n                  currentStatus={currentUser.driverStatus || \"disponible\"}\n                />\n              </div>\n            )}\n          </CardContent>\n        </Card>\n              </div>\n            )}\n\n            {/* Sección Mis Turnos */}\n            {activeTab === \"shifts\" && (\n              <div className=\"space-y-6\">\n                {/* Turno Actual */}\n                {shifts?.current && currentSchedule && (\n          <Card className=\"mb-6 sm:mb-8\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <h3 className=\"text-lg sm:text-xl font-semibold text-gray-800 mb-4\">Mi Turno Actual</h3>\n              <div className=\"bg-gray-50 rounded-lg p-3 sm:p-4\">\n                <div className=\"flex items-start sm:items-center mb-4 space-x-3 sm:space-x-4\">\n                  <div className=\"bg-green-600 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center text-lg sm:text-xl font-bold flex-shrink-0\">\n                    {currentSchedule.routeNumber}\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <h4 className=\"text-base sm:text-lg font-semibold truncate\">Ruta {currentSchedule.routeName}</h4>\n                    <p className=\"text-sm sm:text-base text-gray-600\">Turno: {shifts.current.shiftStart} - {shifts.current.shiftEnd}</p>\n                    <p className=\"text-xs sm:text-sm text-gray-500\">Fecha: {shifts.current.assignedDate}</p>\n                    {getRemainingTime() && (\n                      <p className=\"text-xs sm:text-sm text-blue-600 font-medium\">Tiempo restante: {getRemainingTime()}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Estado:</span>\n                    <span className={`font-medium ml-2 ${shifts.current.isActive ? 'text-green-600' : 'text-red-600'}`}>\n                      {shifts.current.isActive ? 'Activo' : 'Inactivo'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Turno Siguiente */}\n        {shifts?.next && (\n          <Card className=\"mb-6 sm:mb-8\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <h3 className=\"text-lg sm:text-xl font-semibold text-gray-800 mb-4\">Mi Turno Siguiente</h3>\n              <div className=\"bg-blue-50 rounded-lg p-3 sm:p-4\">\n                {nextScheduleLoading ? (\n                  <div className=\"text-center py-4\">\n                    <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n                    <p className=\"text-sm text-gray-600\">Cargando información de la ruta...</p>\n                  </div>\n                ) : nextSchedule ? (\n                  <>\n                    <div className=\"flex items-start sm:items-center mb-4 space-x-3 sm:space-x-4\">\n                      <div className=\"bg-blue-600 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center text-lg sm:text-xl font-bold flex-shrink-0\">\n                        {nextSchedule.routeNumber}\n                      </div>\n                      <div className=\"min-w-0 flex-1\">\n                        <h4 className=\"text-base sm:text-lg font-semibold truncate\">Ruta {nextSchedule.routeName}</h4>\n                        <p className=\"text-sm sm:text-base text-gray-600\">Turno: {shifts.next.shiftStart} - {shifts.next.shiftEnd}</p>\n                        <p className=\"text-xs sm:text-sm text-gray-500\">Fecha: {shifts.next.assignedDate}</p>\n                        <p className=\"text-xs sm:text-sm text-blue-600 font-medium\">Inicia a las {shifts.next.shiftStart}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Estado:</span>\n                        <span className={`font-medium ml-2 ${shifts.next.isActive ? 'text-green-600' : 'text-red-600'}`}>\n                          {shifts.next.isActive ? 'Activo' : 'Inactivo'}\n                        </span>\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-sm text-gray-600\">Error cargando información de la ruta</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Loading state */}\n        {shiftsLoading && (\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-secondary mx-auto mb-4\"></div>\n              <p>Cargando información de turnos...</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Botón Cola de Turnos */}\n        {(shifts?.current || shifts?.next) && (\n          <Card className=\"mb-6 sm:mb-8\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <Button\n                onClick={() => setShowShiftQueue(!showShiftQueue)}\n                className=\"bg-purple-600 hover:bg-purple-700 text-white w-full sm:w-auto px-4 sm:px-6 py-2 sm:py-3\"\n                size=\"sm\"\n              >\n                <List className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n                <span className=\"text-sm sm:text-base\">\n                  {showShiftQueue ? 'Ocultar Cola de Turnos' : 'Ver Cola de Turnos'}\n                </span>\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Modal/Sección Cola de Turnos */}\n        {showShiftQueue && (\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <Calendar className=\"w-6 h-6 text-purple-600 mr-2\" />\n                <h3 className=\"text-xl font-semibold text-gray-800\">Cola de Turnos - Hoy</h3>\n              </div>\n              \n              {allShiftsLoading ? (\n                <div className=\"text-center py-4\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-4\"></div>\n                  <p>Cargando turnos...</p>\n                </div>\n              ) : allTodayShifts.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-4\">No hay turnos programados para hoy</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {allTodayShifts.map((shift, index) => {\n                    const now = new Date();\n                    const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;\n                    const isCurrentShift = currentTime >= shift.shiftStart && currentTime <= shift.shiftEnd;\n                    const isCompleted = currentTime > shift.shiftEnd;\n                    const isPending = currentTime < shift.shiftStart;\n                    \n                    return (\n                      <div key={shift.id} className={`border rounded-lg p-4 ${\n                        isCurrentShift ? 'bg-green-50 border-green-200' : \n                        isCompleted ? 'bg-gray-50 border-gray-200' : \n                        'bg-blue-50 border-blue-200'\n                      }`}>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className={`rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3 ${\n                              isCurrentShift ? 'bg-green-600 text-white' : \n                              isCompleted ? 'bg-gray-400 text-white' : \n                              'bg-blue-600 text-white'\n                            }`}>\n                              {index + 1}\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">\n                                Turno {shift.shiftStart} - {shift.shiftEnd}\n                              </p>\n                              <p className=\"text-sm text-gray-600\">\n                                Fecha: {shift.assignedDate}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            {isCurrentShift && (\n                              <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800\">\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                En Curso\n                              </span>\n                            )}\n                            {isCompleted && (\n                              <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800\">\n                                <StopCircle className=\"w-3 h-3 mr-1\" />\n                                Completado\n                              </span>\n                            )}\n                            {isPending && (\n                              <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800\">\n                                <Clock className=\"w-3 h-3 mr-1\" />\n                                Pendiente\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n                {/* No shifts message */}\n                {!shifts?.current && !shifts?.next && !shiftsLoading && (\n                  <Card className=\"mb-8\">\n                    <CardContent className=\"p-6 text-center\">\n                      <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">Sin Turnos Asignados</h3>\n                      <p className=\"text-gray-600\">\n                        No tiene turnos asignados para hoy. Contacte con el administrador.\n                      </p>\n                      {shiftsError && (\n                        <p className=\"text-sm text-red-500 mt-2\">\n                          Error: {String(shiftsError)}\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n\n            {/* Sección Estado */}\n            {activeTab === \"status\" && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardContent className=\"p-6 text-center\">\n                    <RefreshCw className=\"w-16 h-16 text-blue-500 mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Actualizar Estado</h3>\n                    <p className=\"text-gray-600 mb-6\">\n                      Mantenga su estado actualizado para informar a los pasajeros sobre su situación actual.\n                    </p>\n                    {currentUser && (\n                      <div className=\"max-w-xs mx-auto mb-6\">\n                        <StatusModal \n                          driverId={currentUser.id} \n                          currentStatus={currentUser.driverStatus || \"disponible\"}\n                        />\n                      </div>\n                    )}\n                    \n                    {/* Mostrar estado actual */}\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium text-blue-800 mb-2\">Estado Actual:</h4>\n                      <p className=\"text-blue-600\">\n                        {(() => {\n                          const status = currentUser?.driverStatus || \"disponible\";\n                          const statusLabels = {\n                            \"disponible\": \"🟢 Disponible\",\n                            \"en_ruta_cargar\": \"🟡 En ruta a cargar\",\n                            \"en_ruta_descargar\": \"🟠 En ruta a descargar\",\n                            \"cargando\": \"🔵 Cargando\",\n                            \"descargando\": \"🟣 Descargando\",\n                            \"no_disponible\": \"🔴 No disponible\"\n                          };\n                          return statusLabels[status as keyof typeof statusLabels] || status;\n                        })()} \n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":32899},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport { LoginRequest, loginSchema } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authManager } from \"@/lib/auth\";\nimport { Bus, Users } from \"lucide-react\";\n\nexport default function Login() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const form = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginRequest) => {\n    setIsLoading(true);\n    try {\n      const res = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      const user = await res.json();\n      \n      authManager.setCurrentUser(user);\n      toast({\n        title: \"Inicio de sesión exitoso\",\n        description: `Bienvenido, ${user.fullName}`,\n      });\n      \n      // Redirigir según el rol del usuario\n      if (user.role === 'admin') {\n        navigate('/admin');\n      } else if (user.role === 'driver') {\n        navigate('/driver');\n      } else {\n        navigate('/');\n      }\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error de autenticación\",\n        description: error.message || \"Credenciales inválidas\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-primary rounded-full mb-4\">\n              <Bus className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-800\">Sistema de Transporte</h1>\n            <p className=\"text-gray-600 mt-2\">Gestión y Monitoreo</p>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Usuario</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Ingrese su usuario\"\n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contraseña</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Ingrese su contraseña\"\n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-primary hover:bg-primary-dark\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Iniciando sesión...\" : \"Iniciar Sesión\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 pt-6 border-t border-gray-200\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 mb-3\">¿Eres pasajero?</p>\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => navigate('/passenger')}\n                data-testid=\"button-passenger-access\"\n              >\n                <Users className=\"w-4 h-4 mr-2\" />\n                Ver Información de Transporte\n              </Button>\n            </div>\n          </div>\n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4630},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/passenger-view.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { ArrowLeft, MapPin, Clock, Bus, AlertTriangle, Navigation } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { GoogleMap } from '@/components/google-map';\nimport { Location, Assignment, Route, User, Bus as BusType } from '@shared/schema';\n\ninterface PassengerViewProps {\n  onBackToLogin: () => void;\n}\n\nexport default function PassengerView({ onBackToLogin }: PassengerViewProps) {\n  const [mapCenter, setMapCenter] = useState({ lat: 14.634915, lng: -90.506882 }); // Guatemala City\n  const [mapZoom, setMapZoom] = useState(12);\n\n  // Consultar ubicaciones en tiempo real\n  const { data: locations = [], isLoading: locationsLoading } = useQuery<Location[]>({\n    queryKey: ['/api/locations'],\n    refetchInterval: 5000, // Actualizar cada 5 segundos\n  });\n\n  // Consultar asignaciones/turnos\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: ['/api/assignments'],\n    refetchInterval: 30000, // Actualizar cada 30 segundos\n  });\n\n  // Consultar rutas para obtener nombres\n  const { data: routes = [] } = useQuery<Route[]>({\n    queryKey: ['/api/schedules'],\n  });\n\n  // Consultar usuarios para obtener nombres de choferes y estados\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n    refetchInterval: 5000, // Actualizar cada 5 segundos para mostrar cambios de estado\n  });\n\n  // Consultar buses para obtener modelos\n  const { data: buses = [] } = useQuery<BusType[]>({\n    queryKey: ['/api/buses'],\n  });\n\n  // Obtener información de choferes transmitiendo\n  const transmittingDrivers = locations.filter(loc => loc.isTransmitting);\n\n  // Función para centrar el mapa en un chofer específico\n  const centerOnDriver = (driverId: string) => {\n    const driverLocation = locations.find(loc => loc.driverId === driverId && loc.isTransmitting);\n    if (driverLocation) {\n      setMapCenter({\n        lat: parseFloat(driverLocation.latitude),\n        lng: parseFloat(driverLocation.longitude)\n      });\n      setMapZoom(16);\n    }\n  };\n\n  // Obtener información de la ruta por ID\n  const getRouteInfo = (scheduleId: string) => {\n    return routes.find((route) => route.id === scheduleId);\n  };\n\n  // Obtener información del chofer por ID\n  const getDriverInfo = (driverId: string) => {\n    return users.find((user) => user.id === driverId);\n  };\n\n  // Obtener información del bus por ID\n  const getBusInfo = (busId: string) => {\n    return buses.find((bus) => bus.id === busId);\n  };\n\n  // Formatear hora\n  const formatTime = (timeString: string) => {\n    return new Date(`2000-01-01T${timeString}`).toLocaleTimeString('es-GT', {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'America/Guatemala'\n    });\n  };\n\n  // Obtener etiqueta y color para el estado del chofer\n  const getDriverStatusDisplay = (driverStatus: string | null | undefined, isTransmitting: boolean) => {\n    if (!isTransmitting) {\n      return {\n        label: \"🔴 Inactivo\",\n        variant: \"secondary\" as const,\n        className: \"\"\n      };\n    }\n\n    const statusLabels: Record<string, { label: string; variant: \"default\" | \"secondary\"; className: string }> = {\n      \"disponible\": { label: \"🟢 Disponible\", variant: \"default\", className: \"bg-green-600\" },\n      \"en_ruta_cargar\": { label: \"🟡 En ruta a cargar\", variant: \"default\", className: \"bg-yellow-600\" },\n      \"en_ruta_descargar\": { label: \"🟠 En ruta a descargar\", variant: \"default\", className: \"bg-orange-600\" },\n      \"cargando\": { label: \"🔵 Cargando\", variant: \"default\", className: \"bg-blue-600\" },\n      \"descargando\": { label: \"🟣 Descargando\", variant: \"default\", className: \"bg-purple-600\" },\n      \"no_disponible\": { label: \"🔴 No disponible\", variant: \"secondary\", className: \"bg-red-600\" }\n    };\n\n    return statusLabels[driverStatus || \"disponible\"] || statusLabels[\"disponible\"];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-blue-600 text-white shadow-lg\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Bus className=\"h-8 w-8\" />\n              <div>\n                <h1 className=\"text-xl font-bold\">Transporte Público</h1>\n                <p className=\"text-blue-100 text-sm\">Monitoreo en Tiempo Real</p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onBackToLogin}\n              className=\"bg-white text-blue-600 hover:bg-blue-50\"\n              data-testid=\"button-back-to-login\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Volver\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Mapa */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MapPin className=\"h-5 w-5\" />\n                  <span>Ubicación de Buses en Tiempo Real</span>\n                  <Badge variant=\"secondary\" data-testid=\"badge-active-buses\">\n                    {transmittingDrivers.length} en servicio\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {locationsLoading ? (\n                  <div className=\"w-full h-96 flex items-center justify-center bg-gray-100 rounded-lg\">\n                    <div className=\"text-center\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n                      <p className=\"text-gray-600\">Cargando mapa...</p>\n                    </div>\n                  </div>\n                ) : (\n                  <GoogleMap\n                    locations={locations}\n                    center={mapCenter}\n                    zoom={mapZoom}\n                    className=\"w-full h-96 rounded-lg\"\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Panel de información */}\n          <div className=\"space-y-6\">\n\n            {/* Horarios/Turnos */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  <span>Horarios de Turnos</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {assignmentsLoading ? (\n                  <div className=\"text-center py-4\">\n                    <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n                    <p className=\"text-gray-600\">Cargando horarios...</p>\n                  </div>\n                ) : assignments.length === 0 ? (\n                  <div className=\"text-center py-4\">\n                    <Clock className=\"h-12 w-12 text-gray-300 mx-auto mb-2\" />\n                    <p className=\"text-gray-500\">No hay turnos programados</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {assignments\n                      .sort((a, b) => a.shiftStart.localeCompare(b.shiftStart))\n                      .map((assignment, index) => {\n                        const route = getRouteInfo(assignment.scheduleId);\n                        const driver = getDriverInfo(assignment.driverId);\n                        const bus = getBusInfo(assignment.busId);\n                        const driverLocation = locations.find(loc => loc.driverId === assignment.driverId);\n                        const isTransmitting = driverLocation?.isTransmitting || false;\n                        \n                        return (\n                          <div key={assignment.id} className=\"p-3 border rounded-lg hover:bg-gray-50\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"flex-1\">\n                                <p className=\"font-medium\" data-testid={`text-route-${index}`}>\n                                  {route?.routeName || 'Ruta sin nombre'}\n                                </p>\n                                <p className=\"text-sm text-gray-600\">\n                                  {formatTime(assignment.shiftStart)} - {formatTime(assignment.shiftEnd)}\n                                </p>\n                                <div className=\"mt-1 space-y-1\">\n                                  <p className=\"text-xs text-gray-500 flex items-center\">\n                                    <span className=\"mr-1\">👤</span>\n                                    Chofer: {driver?.fullName || 'No asignado'}\n                                  </p>\n                                  <p className=\"text-xs text-gray-500 flex items-center\">\n                                    <span className=\"mr-1\">🚌</span>\n                                    Bus: {bus?.model || 'No especificado'} ({bus?.busNumber || 'N/A'})\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                {(() => {\n                                  const statusDisplay = getDriverStatusDisplay(driver?.driverStatus, isTransmitting);\n                                  return (\n                                    <Badge \n                                      variant={statusDisplay.variant}\n                                      className={statusDisplay.className}\n                                      data-testid={`badge-status-${index}`}\n                                    >\n                                      {statusDisplay.label}\n                                    </Badge>\n                                  );\n                                })()}\n                                {isTransmitting && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => centerOnDriver(assignment.driverId)}\n                                    data-testid={`button-track-driver-${index}`}\n                                  >\n                                    <Navigation className=\"h-3 w-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Información General */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"h-5 w-5\" />\n                  <span>Estado del Servicio</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Buses operando:</span>\n                    <Badge variant=\"default\" data-testid=\"badge-total-operating\">\n                      {transmittingDrivers.length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Turnos programados:</span>\n                    <Badge variant=\"secondary\" data-testid=\"badge-total-shifts\">\n                      {assignments.length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Estado general:</span>\n                    <Badge \n                      variant={transmittingDrivers.length > 0 ? \"default\" : \"secondary\"}\n                      className={transmittingDrivers.length > 0 ? \"bg-green-600\" : \"\"}\n                      data-testid=\"badge-service-status\"\n                    >\n                      {transmittingDrivers.length > 0 ? \"Operativo\" : \"Sin servicio\"}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12918},"client/src/components/status-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authManager } from \"@/lib/auth\";\nimport { RefreshCw } from \"lucide-react\";\n\n// Esquema para actualizar estado\nconst statusFormSchema = z.object({\n  driverStatus: z.enum([\"disponible\", \"en_ruta_cargar\", \"en_ruta_descargar\", \"cargando\", \"descargando\", \"no_disponible\"], {\n    errorMap: () => ({ message: \"Debe seleccionar un estado válido\" }),\n  }),\n});\n\ntype StatusFormData = z.infer<typeof statusFormSchema>;\n\ninterface StatusModalProps {\n  driverId: string;\n  currentStatus?: string;\n}\n\nexport function StatusModal({ driverId, currentStatus = \"disponible\" }: StatusModalProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<StatusFormData>({\n    resolver: zodResolver(statusFormSchema),\n    defaultValues: {\n      driverStatus: currentStatus as StatusFormData[\"driverStatus\"],\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: (data: StatusFormData) =>\n      apiRequest('PUT', `/api/users/${driverId}/status`, data),\n    onSuccess: (response) => {\n      toast({\n        title: \"Estado actualizado\",\n        description: \"Su estado ha sido actualizado exitosamente.\",\n      });\n      setOpen(false);\n      \n      // Actualizar el usuario en AuthManager con el nuevo estado\n      const currentUser = authManager.getCurrentUser();\n      if (currentUser) {\n        const updatedUser = { ...currentUser, driverStatus: form.getValues().driverStatus };\n        authManager.setCurrentUser(updatedUser);\n      }\n      \n      // Invalidar las consultas para refrescar los datos\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/drivers'] });\n      queryClient.refetchQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error: any) => {\n      console.error(\"Error actualizando estado:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error al actualizar estado\",\n        description: error.message || \"No se pudo actualizar el estado. Intente nuevamente.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: StatusFormData) => {\n    updateStatusMutation.mutate(data);\n  };\n\n  // Obtener etiqueta legible para cada estado\n  const getStatusLabel = (status: string) => {\n    const statusLabels: Record<string, string> = {\n      \"disponible\": \"Disponible\",\n      \"en_ruta_cargar\": \"En ruta a cargar\",\n      \"en_ruta_descargar\": \"En ruta a descargar\", \n      \"cargando\": \"Cargando\",\n      \"descargando\": \"Descargando\",\n      \"no_disponible\": \"No disponible\"\n    };\n    return statusLabels[status] || status;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          className=\"w-full flex items-center justify-center space-x-2\"\n          data-testid=\"button-update-status\"\n        >\n          <RefreshCw className=\"w-4 h-4\" />\n          <span>Actualizar Estado</span>\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <RefreshCw className=\"w-5 h-5\" />\n            <span>Actualizar Estado</span>\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"driverStatus\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Estado del Chofer</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-driver-status\">\n                        <SelectValue placeholder=\"Seleccione su estado actual\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"disponible\" data-testid=\"status-disponible\">\n                        🟢 Disponible\n                      </SelectItem>\n                      <SelectItem value=\"en_ruta_cargar\" data-testid=\"status-en-ruta-cargar\">\n                        🟡 En ruta a cargar\n                      </SelectItem>\n                      <SelectItem value=\"en_ruta_descargar\" data-testid=\"status-en-ruta-descargar\">\n                        🟠 En ruta a descargar\n                      </SelectItem>\n                      <SelectItem value=\"cargando\" data-testid=\"status-cargando\">\n                        🔵 Cargando\n                      </SelectItem>\n                      <SelectItem value=\"descargando\" data-testid=\"status-descargando\">\n                        🟣 Descargando\n                      </SelectItem>\n                      <SelectItem value=\"no_disponible\" data-testid=\"status-no-disponible\">\n                        🔴 No disponible\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"text-sm text-gray-600 bg-blue-50 p-3 rounded-lg\">\n              <p className=\"font-medium mb-1\">Estado actual:</p>\n              <p>{getStatusLabel(currentStatus)}</p>\n            </div>\n\n            <div className=\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                className=\"mt-2 sm:mt-0\"\n                data-testid=\"button-cancel-status\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateStatusMutation.isPending}\n                data-testid=\"button-save-status\"\n              >\n                {updateStatusMutation.isPending ? \"Actualizando...\" : \"Actualizar Estado\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6871}},"version":1}